#include "C:\Program Files (x86)\National Instruments\Shared\MSDTRedistributables\SDKHeaderFiles\8.1\winver.h"


2 24 "c:\\Users\\Michael_Harhay\\Documents\\CICDUtility\\Source\\cvibuild.UnitTest\\Debug\\manifest.xml"


STRINGTABLE DISCARDABLE
BEGIN
  65535  ""
END

VS_VERSION_INFO VERSIONINFO
 FILEVERSION 1,0,0,0
 PRODUCTVERSION 1,0,0,0
 FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
 FILEFLAGS 0x1L
 FILEOS VOS__WINDOWS32
 FILETYPE VFT_DLL
 FILESUBTYPE VFT_UNKNOWN
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "\0"
            VALUE "FileDescription", "UnitTest (Debug x86)\0"
            VALUE "FileVersion", "1.0\0"
            VALUE "InternalName", "UnitTest\0"
            VALUE "LegalCopyright", "Copyright ©  2025\0"
            VALUE "OriginalFilename", "UnitTest.dll\0"
            VALUE "ProductName", " UnitTest\0"
            VALUE "ProductVersion", "1.0\0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 0x4b0
    END
END

CVIDLLexports CVIDLLprototypes
{
   "int DllEntryPoint(struct HINSTANCE__ *hinstDLL, unsigned long fdwReason, void *lpvReserved);"
   "\n",
   "int DllMain(struct HINSTANCE__ *hinstDLL, unsigned long fdwReason, void *lpvReserved);"
   "\n",
   "long TS_AdapterAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdapterConfigure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_AdapterGetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdapterGetHidden(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_AdapterGetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdapterGetIsConfigurable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_AdapterGetKeyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdapterGetLargeIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdapterGetLargeIconIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_AdapterGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_AdapterGetShowArgsInStepDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_AdapterGetSmallIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdapterGetSmallIconIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_AdapterSetHidden(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_AdapterSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_AdapterSetShowArgsInStepDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_AdditionalResultGetAreElementsIncompatibleWithType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_AdditionalResultGetCheckedState(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_CheckedStates *val);"
   "\n",
   "long TS_AdditionalResultGetCondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdditionalResultGetElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultGetFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_AdditionalResultGetIsAnyType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_AdditionalResultGetKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_AdditionalResultKinds *val);"
   "\n",
   "long TS_AdditionalResultGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdditionalResultGetParameterObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultGetParentAdditionalResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultGetUnmappedAdditionalResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultGetValueToLog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_AdditionalResultSetCheckedState(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_CheckedStates val);"
   "\n",
   "long TS_AdditionalResultSetCondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_AdditionalResultSetFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_AdditionalResultSetIsAnyType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_AdditionalResultSetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_AdditionalResultSetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_AdditionalResultSetValueToLog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_AdditionalResultsClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_AdditionalResultsGetCheckedItemCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_AdditionalResultsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_AdditionalResultsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_AdditionalResultsInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *resultName, const char *resultValueToLog, const char *resultCondition, long resultFlags, long index, CAObjHandle *val);"
   "\n",
   "long TS_AdditionalResultsMove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, long newIndex);"
   "\n",
   "long TS_AdditionalResultsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_ArrayDimensionsGetDimensionsSizes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_ArrayDimensionsGetDisplayString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ArrayDimensionsGetLowerBounds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_ArrayDimensionsGetLowerBoundsString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ArrayDimensionsGetUpperBounds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_ArrayDimensionsGetUpperBoundsString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ArrayDimensionsSetBounds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *lowerBounds, struct tagSAFEARRAY *upperBounds);"
   "\n",
   "long TS_ArrayDimensionsSetBoundsByStrings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lowerBounds, const char *upperBounds);"
   "\n",
   "long TS_CodeTemplateGetDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CodeTemplateGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CodeTemplateGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_CodeTemplateTypes *val);"
   "\n",
   "long TS_CodeTemplatesGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_CodeTemplatesGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *val);"
   "\n",
   "long TS_CodeTemplatesGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_CsvFileInputRecordStreamGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CsvFileInputRecordStreamGetSeparatorChar(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CsvFileInputRecordStreamOpen(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *absolutePath);"
   "\n",
   "long TS_CsvFileInputRecordStreamReadLine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **lineString, long *returnValue);"
   "\n",
   "long TS_CsvFileInputRecordStreamScanForTag(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *tag, short ignoreCase, long *returnValue);"
   "\n",
   "long TS_CsvFileInputRecordStreamSetSeparatorChar(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_CsvFileInputRecordStreamSkipLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long numLines, long *returnValue);"
   "\n",
   "long TS_CsvFileOutputRecordStreamGetAutoFlush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_CsvFileOutputRecordStreamGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CsvFileOutputRecordStreamGetSeparatorChar(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_CsvFileOutputRecordStreamOpen(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *absolutePath, long openMode);"
   "\n",
   "long TS_CsvFileOutputRecordStreamSetAutoFlush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_CsvFileOutputRecordStreamSetSeparatorChar(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_CsvFileOutputRecordStreamWriteFieldHeaders(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle fields, const char *mapping);"
   "\n",
   "long TS_CsvFileOutputRecordStreamWriteLine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lineString);"
   "\n",
   "long TS_EditArgsAddSelectedPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle propertyToAdd);"
   "\n",
   "long TS_EditArgsAddSelectedSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequence);"
   "\n",
   "long TS_EditArgsAddSelectedStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle step);"
   "\n",
   "long TS_EditArgsAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EditArgsClearSelectedPropertyObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EditArgsClearSelectedSequences(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EditArgsClearSelectedSteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EditArgsGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_EditArgsSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_EditArgsSetSelectedExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle execution);"
   "\n",
   "long TS_EditArgsSetSelectedPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle propertyFile);"
   "\n",
   "long TS_EditArgsSetSelectedSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFile);"
   "\n",
   "long TS_EditArgsSetSelectedStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam);"
   "\n",
   "long TS_EditTimeMenuItemGetCommandArguments(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetCommandArgumentsExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetCommandInitialDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetCommandPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EditTimeMenuItemGetEditsSelectedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EditTimeMenuItemGetEnabledExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetHiddenExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetItemTextExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetSeparatorBefore(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EditTimeMenuItemGetSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetSequenceName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EditTimeMenuItemGetSubMenuItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EditTimeMenuItemGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ToolMenuTypes *val);"
   "\n",
   "long TS_EditTimeMenuItemSetCommandArguments(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetCommandArgumentsExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetCommandInitialDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetCommandPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_EditTimeMenuItemSetEditsSelectedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_EditTimeMenuItemSetEnabledExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetHiddenExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetItemTextExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetSeparatorBefore(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_EditTimeMenuItemSetSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetSequenceName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EditTimeMenuItemSetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ToolMenuTypes val);"
   "\n",
   "long TS_EditTimeMenuItemsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EditTimeMenuItemsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *menuItem);"
   "\n",
   "long TS_EditTimeMenuItemsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_EditTimeMenuItemsInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ToolMenuTypes type, long index, CAObjHandle *menuItem);"
   "\n",
   "long TS_EditTimeMenuItemsMoveItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, long newIndex);"
   "\n",
   "long TS_EditTimeMenuItemsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_EngineAbortAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineAcquireLicense(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ApplicationLicenses license, long options, long *val);"
   "\n",
   "long TS_EngineAddImage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle image, const char *imageName, long *imageIndex);"
   "\n",
   "long TS_EngineBeginProfiling(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineBreakAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineCallFrontEndCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam, CAObjHandle argumentList, CAObjHandle *exeHandleObj);"
   "\n",
   "long TS_EngineCallFrontEndCallbackEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam, CAObjHandle argumentList, enum TSEnum_TypeConflictHandlerTypes handlerType, long reservedParam, CAObjHandle *exeHandleObj);"
   "\n",
   "long TS_EngineCanCreateStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyNameVal, const char *stepTypeName, short *val);"
   "\n",
   "long TS_EngineCancelLaunchNewApplicationWhenShutdownCompletes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineCheckExprSyntax(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *expressionStr, char **errorDescription, long *startErrPos, long *endErrPos, short *syntaxIsOK);"
   "\n",
   "long TS_EngineCheckExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle evaluationContext, const char *expressionStr, long evaluationOptions, char **errorDescription, long *startErrPos, long *endErrPos, short *isOK);"
   "\n",
   "long TS_EngineClearFilePasswordCache(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineCommitGlobalsToDisk(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short promptOnSaveConflicts);"
   "\n",
   "long TS_EngineConstructToolMenus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT editArgsParam, long *numMenus);"
   "\n",
   "long TS_EngineCopyPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle srcObj, CAObjHandle *val);"
   "\n",
   "long TS_EngineCreateNewUniqueStepIds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *steps);"
   "\n",
   "long TS_EngineCreateTempFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *baseName, const char *extension, const char *directory, char **val);"
   "\n",
   "long TS_EngineCurrentUserHasPrivilege(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *privilegeName, short *hasPrivilege);"
   "\n",
   "long TS_EngineDelocalizeExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *localizedExpressionString, enum TSEnum_DecimalPointLocalizationOptions decimalPointOption, char **delocalizedExpressionString);"
   "\n",
   "long TS_EngineDiffSequenceFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFile1Param, CAObjHandle sequenceFile2Param, long options, CAObjHandle *returnVal);"
   "\n",
   "long TS_EngineDisplayAdapterConfigDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short adapterSelectorReadOnly, short adapterCfgReadOnly, short hideAdapterSelector, short modalToAppMainWind, short *modifiedSettings);"
   "\n",
   "long TS_EngineDisplayBreakpointDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle seqParam, CAObjHandle execParam, CAObjHandle selectedStep, enum TSEnum_StepGroups stepGroupParam, long dlgOptions, short *userHitOK);"
   "\n",
   "long TS_EngineDisplayBrowseExprDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequenceContextParam, const char *expressionIn, long selectionStartIn, long selectionEndIn, const char *initialVariableName, short usesCRLF, short modalToAppMainWind, char **expressionOut, long *selectionStartOut, long *selectionEndOut, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayBrowseExprDialogEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle objectToBrowse, const char *expressionIn, long selectionStartIn, long selectionEndIn, const char *initialVariableName, long dlgOptions, char **expressionOut, long *selectionStartOut, long *selectionEndOut, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayBrowseExprDialogFromControl(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown *expressionEdit, const char *dlgTitle, long selectionStart, long selectionEnd, const char *initVarName, long dlgOptions, short *contextChanged, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayBrowsePropertyObjectDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle objectToBrowse, const char *initialLocation, long dlgOptions);"
   "\n",
   "long TS_EngineDisplayConfigureTypePalettesDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, short *modified);"
   "\n",
   "long TS_EngineDisplayEditBreakAndWatchDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, struct tagVARIANT *selectedItemParam);"
   "\n",
   "long TS_EngineDisplayEditNumericFormatDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, char **numericFormat, long dlgOptions, double sampleNumber, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayEditNumericFormatDialogEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, char **numericFormat, short *validFormat, long dlgOptions, double sampleNumber, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayEditPathsInFilesDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, struct tagVARIANT initialFile, short *modified);"
   "\n",
   "long TS_EngineDisplayEditUserDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle userObject, short modalToAppMainWind, short *modified);"
   "\n",
   "long TS_EngineDisplayEnvironmentConfigurationDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long dlgOptions, char **newEnvironmentPath, short *val);"
   "\n",
   "long TS_EngineDisplayExpressionEditOptionsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayExternalViewerDlg(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short readOnly, short modalToAppMainWind, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayFileDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *okButtonText, const char *initialPath, struct tagSAFEARRAY **selectedPaths, struct tagSAFEARRAY **absolutePaths, long openFileDialogFlags, const char *defaultExtension, long win32Flags, const char *fileFilter, struct tagVARIANT currentFile, struct tagVARIANT *fileFilterIndex, struct tagVARIANT *dirHistoryList, short *fileWasSelected);"
   "\n",
   "long TS_EngineDisplayHelpFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *htmlFile, const char *helpFile, const char *tableOfContentsFile, const char *indexFile, const char *homeFile, const char *windowCaption, long *hwnd);"
   "\n",
   "long TS_EngineDisplayHelpTopic(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long tagID, const char *helpFile, const char *tableOfContentsFile, const char *indexFile, const char *homeFile, const char *windowCaption, long *hwnd);"
   "\n",
   "long TS_EngineDisplayLockUnlockDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *dlgMsg, CAObjHandle propObject, long options, struct tagVARIANT *passwordString, short *userHitOK);"
   "\n",
   "long TS_EngineDisplayLoginDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *initialLoginName, const char *initialPassword, short modalToAppMainWind, CAObjHandle *userObject, short *success);"
   "\n",
   "long TS_EngineDisplayLoopOnStepsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle selectedStep, short modalToAppMainWnd, long *loopCountValue, char **stopExpressionValue, short *userHitOK);"
   "\n",
   "long TS_EngineDisplayMessageBox(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *messageText, enum TSEnum_MsgBoxTypes msgBoxType, long dlgOptions, long win32Flags, long *userResponse);"
   "\n",
   "long TS_EngineDisplayNewUserDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short modalToAppMainWind, CAObjHandle *userObject, short *success);"
   "\n",
   "long TS_EngineDisplayOpenFileDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *okButtonText, const char *initialPath, short modalToAppMainWind, char **selectedPath, char **absolutePath, long openFileDialogFlags, const char *defaultExtension, long win32Flags, const char *fileFilter, struct tagVARIANT currentSequenceFile, short *fileWasSelected);"
   "\n",
   "long TS_EngineDisplayOptionsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short readOnly, short modalToAppMainWind, short *modified);"
   "\n",
   "long TS_EngineDisplayPasswordProtectTypeDefinitionsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *typeDefinitions, struct tagSAFEARRAY **modifiedTypeDefinitions, long dlgOptions, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayPreconditionBuilderDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, char **preconditionExpr, CAObjHandle sequence, long dlgOptions, CAObjHandle sequenceContext, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayPreconditionDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequence, short readOnly, short modalToAppMainWind, struct tagVARIANT initialStep, short *modifiedSeq);"
   "\n",
   "long TS_EngineDisplayRunTimeErrorDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *errorMessage, short inCleanupStepGroup, short modalToAppMainWind, short *displayOnNextError, short *suspendExecution, enum TSEnum_RTEOptions *runTimeErrorAction);"
   "\n",
   "long TS_EngineDisplayRunTimeErrorDialogEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequenceContextParam, long dlgOptions, short *suspendExecution, short *dontShowAgainForExecution, short *dontShowAgainForBatch, enum TSEnum_RTEOptions *runTimeErrorAction);"
   "\n",
   "long TS_EngineDisplaySaveAsPreviousOverExistingFileDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, const char *dlgTitle, enum TSEnum_PromptResults *result);"
   "\n",
   "long TS_EngineDisplaySaveOverOldFormatDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, enum TSEnum_PerformActionOptions *promptForOverwriteOption, const char *dlgTitle, long dlgOptions, enum TSEnum_PromptResults *result);"
   "\n",
   "long TS_EngineDisplaySearchDirDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short readOnly, short modalToAppMainWind, short *modified);"
   "\n",
   "long TS_EngineDisplaySeqFilePropDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequenceFileParam, short readOnly, short modalToAppMainWind, short showViewContentsBtn, short *viewContents, short *modifiedSeqFile);"
   "\n",
   "long TS_EngineDisplaySequenceFileCallbacksDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequenceFileParam, long dlgOptions, char **sequenceToEdit, long *numCallbacksAdded, long *numCallbacksDeleted, short *modifiedSeqFile);"
   "\n",
   "long TS_EngineDisplaySequencePropDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle sequence, short readOnly, short modalToAppMainWind, short showViewContentsBtn, short *viewContents, short *modifiedSeq);"
   "\n",
   "long TS_EngineDisplayStepPropDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle step, short readOnly, short modalToAppMainWind, short showViewContentsBtn, short *viewContents, short *modifiedStep, short *userHitOK);"
   "\n",
   "long TS_EngineDisplayStepTypeMenuEditor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short forSubsteps, long dlgOptions, short *modifiedMenu);"
   "\n",
   "long TS_EngineDisplayStepTypeMenuEditorEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle selectedFile, short forSubsteps, long dlgOptions, short *modifiedMenu);"
   "\n",
   "long TS_EngineDisplayToolMenuDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short readOnly, short modalToAppMainWind, short *modifiedMenu);"
   "\n",
   "long TS_EngineDisplayUnlockTypeDefinitionsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *typeDefinitions, short *allTypesUnlocked, long dlgOptions, short *pressedOK);"
   "\n",
   "long TS_EngineDisplayWorkspaceBrowserDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions);"
   "\n",
   "long TS_EngineDoDotNetGarbageCollection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reserved);"
   "\n",
   "long TS_EngineEndProfiling(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineEnvironmentGetEnvironmentPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineEnvironmentGetTestStandPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TestStandPaths testStandPath, short resolveAbsolutePath, char **path);"
   "\n",
   "long TS_EngineEnvironmentReadFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path);"
   "\n",
   "long TS_EngineEnvironmentSetEnvironmentPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EngineEnvironmentSetTestStandPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TestStandPaths testStandPath, const char *path);"
   "\n",
   "long TS_EngineEnvironmentWriteFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineEvalToolMenuItemExprs(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT editArgsParam);"
   "\n",
   "long TS_EngineExpandPathMacros(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **pathString, short *foundMacros);"
   "\n",
   "long TS_EngineFindFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *fileToFind, char **absolutePath, short *userCancelled, enum TSEnum_FindFilePromptOptions promptOption, enum TSEnum_FindFileSearchListOptions srchListOption, short isCommand, struct tagVARIANT currentSequenceFile, short *val);"
   "\n",
   "long TS_EngineFindFileEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *fileToFind, char **absolutePath, enum TSEnum_SearchDirectoryTypes *srchDirType, long *searchDirectoryIndex, short *userCancelled, enum TSEnum_FindFilePromptOptions promptOption, enum TSEnum_FindFileSearchListOptions srchListOption, short isCommand, struct tagVARIANT searchContext, struct tagVARIANT reserved, short *val);"
   "\n",
   "long TS_EngineFindPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathToFind, char **absolutePath, enum TSEnum_FindPathStatusValues *statusFlag, struct tagVARIANT currentSequenceFile, short *val);"
   "\n",
   "long TS_EngineGetAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long adapterIndex, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetAdapterByKeyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyName, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetAlwaysGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_EngineGetAppMainHwnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *hwnd);"
   "\n",
   "long TS_EngineGetApplicationIsEditor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEditor);"
   "\n",
   "long TS_EngineGetApplicationLicense(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ApplicationLicenses *returnVal);"
   "\n",
   "long TS_EngineGetAutoLoginSystemUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_EngineGetBinDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetBreakOnRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_EngineGetBreakpointsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_EngineGetBuildVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetBuiltinDataTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetCVIAdapter_ExecuteStepsInCVI(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EngineGetCVIAdapter_ExternalCVIPrj(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetCheckOutFilesWhenEdited(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *checkOutFiles);"
   "\n",
   "long TS_EngineGetCheckOutOnlySelectedFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *onlySelectedFiles);"
   "\n",
   "long TS_EngineGetComputerName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetConfigDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetConfigFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetCurrentUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetCurrentWorkspaceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetCustomDataTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetDefaultAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **adapterKeyNameVal);"
   "\n",
   "long TS_EngineGetDefaultAdapterIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *index);"
   "\n",
   "long TS_EngineGetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isDisabled);"
   "\n",
   "long TS_EngineGetDotNetCLRVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetDotNetGarbageCollectionInterval(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetEditTimeToolMenuItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reserved, CAObjHandle *editTimeMenuItems);"
   "\n",
   "long TS_EngineGetEnableRemote(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_EngineGetEnableUserPrivilegeChecking(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_EngineGetEngineConfigFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectFileTypes configFileType, CAObjHandle *file);"
   "\n",
   "long TS_EngineGetEnvironmentPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetErrorString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_Error errorCode, char **errorString, short *found);"
   "\n",
   "long TS_EngineGetExecutionMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetExternalReportViewers(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *externalReportViewers);"
   "\n",
   "long TS_EngineGetFileDialogDirHistoryList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **directories);"
   "\n",
   "long TS_EngineGetFileInformation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, CAObjHandle *currentFileInformation);"
   "\n",
   "long TS_EngineGetGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetGlobalsFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetImageIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *imageName, long *imageIndex);"
   "\n",
   "long TS_EngineGetImageName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long imageIndex, char **imageName);"
   "\n",
   "long TS_EngineGetImages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetInsertStepMenuStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle selectedFile, long hiddenFlags, CAObjHandle *menuStructure);"
   "\n",
   "long TS_EngineGetInsertVariableMenuStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle selectedFile, long hiddenFlags, CAObjHandle *menuStructure);"
   "\n",
   "long TS_EngineGetInternalOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_InternalOptions option, struct tagVARIANT *val);"
   "\n",
   "long TS_EngineGetIs64Bit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EngineGetIsRemote(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isRemoteParam);"
   "\n",
   "long TS_EngineGetIsUIMessageQueueEmpty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EngineGetLargeImageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *imageListHandle);"
   "\n",
   "long TS_EngineGetLargeImageListEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *imageListHandle);"
   "\n",
   "long TS_EngineGetLastWorkspacePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **pathString);"
   "\n",
   "long TS_EngineGetLicenseDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reserved, char **val);"
   "\n",
   "long TS_EngineGetLicenseType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_LicenseTypes *val);"
   "\n",
   "long TS_EngineGetLocalizedDecimalPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_DecimalPointLocalizationOptions decimalPointOption, char **localizedDecimalPoint);"
   "\n",
   "long TS_EngineGetLocationForNextDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **locationLookupString, long *elementAtLocation, long *selectionStart, long *selectionLength, short clearLoc);"
   "\n",
   "long TS_EngineGetMajorVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetMasterEngine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *masterEngine);"
   "\n",
   "long TS_EngineGetMinorVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetModuleProfiling(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyName, short *enabled);"
   "\n",
   "long TS_EngineGetNumAdapters(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *numAdapters);"
   "\n",
   "long TS_EngineGetNumImages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *numImages);"
   "\n",
   "long TS_EngineGetNumToolMenuItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long menuIndex, long *numItems);"
   "\n",
   "long TS_EngineGetNumToolMenus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *numMenus);"
   "\n",
   "long TS_EngineGetOutputMessages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetOutputMessagesEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enable);"
   "\n",
   "long TS_EngineGetPersistBreakpoints(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnVal);"
   "\n",
   "long TS_EngineGetPersistConfigFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnVal);"
   "\n",
   "long TS_EngineGetPersistWatchExpressions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnVal);"
   "\n",
   "long TS_EngineGetProductRegistrationInfo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **userName, char **companyName, char **serialNumber, short *isValidInfo);"
   "\n",
   "long TS_EngineGetProfilerOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetProfilerOutputMessageCategoryName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetProfilingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_EngineGetPromptWhenAddingFilesToSC(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *promptAddFile);"
   "\n",
   "long TS_EngineGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_EngineGetRTEOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions *option);"
   "\n",
   "long TS_EngineGetRelativePathFromAbsolutePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *absolutePath, struct tagVARIANT searchContext, char **relativePath, char **searchDirectoryPath, short *val);"
   "\n",
   "long TS_EngineGetReloadDocsWhenOpeningWorkspace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *reloadDocs);"
   "\n",
   "long TS_EngineGetReloadWorkspaceAtStartup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *reloadWorkspace);"
   "\n",
   "long TS_EngineGetRemoteExecutorInterface(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long adapterIndex, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetRequireUserLogin(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *requireUser);"
   "\n",
   "long TS_EngineGetResourceString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *section, const char *symbol, struct tagVARIANT defaultString, struct tagVARIANT *found, char **val);"
   "\n",
   "long TS_EngineGetResourceSymbols(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *section, struct tagSAFEARRAY **symbols);"
   "\n",
   "long TS_EngineGetRevisionVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetRunTimeToolMenuItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT editArgsParam, long reserved, CAObjHandle *runTimeMenuItems);"
   "\n",
   "long TS_EngineGetSearchDirectories(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *searchDirectories);"
   "\n",
   "long TS_EngineGetSecondsAtStartIn1970UniversalCoordinatedTime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *secondsReturnValue);"
   "\n",
   "long TS_EngineGetSecondsSince1970UniversalCoordinatedTime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *secondsReturnValue);"
   "\n",
   "long TS_EngineGetSecondsSinceStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *secondsReturnValue);"
   "\n",
   "long TS_EngineGetSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *seqFilePath, long getSeqFileFlags, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetSeqFileEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *seqFilePath, long getSeqFileFlags, enum TSEnum_TypeConflictHandlerTypes handlerType, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetSeqFileVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileVersionAutoIncrement *option);"
   "\n",
   "long TS_EngineGetShowHiddenProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *show);"
   "\n",
   "long TS_EngineGetSmallImageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *imageListHandle);"
   "\n",
   "long TS_EngineGetSmallImageListEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *imageListHandle);"
   "\n",
   "long TS_EngineGetStationID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetStationModelSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **modelDescriptionString, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetStationModelSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **modelPath);"
   "\n",
   "long TS_EngineGetStationOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *stationOptions);"
   "\n",
   "long TS_EngineGetStepTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetSyncManager(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *syncObjectName, struct IUnknown **val);"
   "\n",
   "long TS_EngineGetTemplatesFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetTemporaryGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetTestStandDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetTestStandPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TestStandPaths testStandPath, char **val);"
   "\n",
   "long TS_EngineGetToolMenuItemInfo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long menuIndex, long itemIndex, char **itemText, long *subMenuIndex, short *enabled, long *uniqueItemID);"
   "\n",
   "long TS_EngineGetToolMenuItemInfoEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long menuIndex, long itemIndex, char **itemText, long *subMenuIndex, long *itemAttributes, long *uniqueItemID);"
   "\n",
   "long TS_EngineGetToolMenuItemInfoWithID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long uniqueItemID, char **itemText, long *subMenuIndex, short *enabled);"
   "\n",
   "long TS_EngineGetToolMenuItemInfoWithIDEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long uniqueItemID, char **itemText, long *subMenuIndex, long *itemAttributes);"
   "\n",
   "long TS_EngineGetToolMenuStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *menuStructure);"
   "\n",
   "long TS_EngineGetTracingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_EngineGetTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *typeNameParam, CAObjHandle *typeParam);"
   "\n",
   "long TS_EngineGetTypeNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **typeNames);"
   "\n",
   "long TS_EngineGetTypePaletteFileList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **typePaletteFiles);"
   "\n",
   "long TS_EngineGetTypeUsageLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *typeNameParam, struct tagSAFEARRAY **files);"
   "\n",
   "long TS_EngineGetTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reserved, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *msg);"
   "\n",
   "long TS_EngineGetUIMessageDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *millisecDelay);"
   "\n",
   "long TS_EngineGetUIMessageMinDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *millisecDelay);"
   "\n",
   "long TS_EngineGetUIMessagePollingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_EngineGetUndoLimit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetUniqueEngineId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetUseDialogForCheckOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *useDialog);"
   "\n",
   "long TS_EngineGetUseLocalizedDecimalPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_EngineGetUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *loginName, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetUserGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *userGroupName, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetUserProfile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *userProfileName, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetUsersFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetUtility(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineGetVersionString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_EngineGetWatchExpressions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle clientSequenceFileParam, CAObjHandle scopingSeqContext, long filterOptions, CAObjHandle *watchExpressions);"
   "\n",
   "long TS_EngineGetWatchExpressionsChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EngineGetWatchExpressionsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enable);"
   "\n",
   "long TS_EngineHasAddonLicense(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *addonFeatureName, short *hasLicense);"
   "\n",
   "long TS_EngineInvokeToolMenuItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long menuIndex, long itemIndex);"
   "\n",
   "long TS_EngineInvokeToolMenuItemWithID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long uniqueItemID);"
   "\n",
   "long TS_EngineIsCurrentSequenceFileVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *filePath, long *nResult);"
   "\n",
   "long TS_EngineLaunchExternalViewer(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *filePath);"
   "\n",
   "long TS_EngineLaunchNewApplicationWhenShutdownCompletes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *appPath, const char *environment, const char *additionalArgs);"
   "\n",
   "long TS_EngineLoadEnvironment(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path);"
   "\n",
   "long TS_EngineLoadTypePaletteFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineLoadTypePaletteFilesEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeConflictHandlerTypes handlerType, long options);"
   "\n",
   "long TS_EngineLocalizeExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *expressionString, enum TSEnum_DecimalPointLocalizationOptions decimalPointOption, char **localizedExpressionString);"
   "\n",
   "long TS_EngineLogProfilerAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *profilerMechanism, const char *adapterKeyName, CAObjHandle sequenceContextParam, const char *threadId, const char *threadDisplayName, const char *name, enum TSEnum_ProfilerStates synchronizationState, const char *operation, double timeout, short postMessage, struct IUnknown *reserved, CAObjHandle *outputMessage);"
   "\n",
   "long TS_EngineNewCsvFileInputRecordStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *absolutePath, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewCsvFileOutputRecordStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *absolutePath, long openMode, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewDataType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyValueTypes valueType, short asArray, const char *typeNameParam, long options, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewEditArgs(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewEditContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle obj, struct tagVARIANT editArgsParam, struct tagVARIANT *locationString, CAObjHandle *newContext);"
   "\n",
   "long TS_EngineNewEvaluationTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long initialPropertyValueTypes, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, const char *sequenceNameParam, CAObjHandle processModelParam, short breakAtFirstStep, long executionTypeMaskParam, struct tagVARIANT sequenceArgsParam, struct tagVARIANT editArgsParam, struct tagVARIANT interactiveArgsParam, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewHierarchicalExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *sequenceCallSteps, long hierarchicalExecutionFlags, CAObjHandle sequenceFileParam, const char *sequenceNameParam, CAObjHandle processModelParam, short breakAtFirstStep, long executionTypeMaskParam, struct tagVARIANT sequenceArgsParam, struct tagVARIANT editArgsParam, struct tagVARIANT interactiveArgsParam, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewInteractiveArgs(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *returnVal);"
   "\n",
   "long TS_EngineNewOutputMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *messageText, const char *categoryText, enum TSEnum_OutputMessageSeverityTypes severity, CAObjHandle sequenceContext, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewOutputMessages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *outputMessages);"
   "\n",
   "long TS_EngineNewPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyValueTypes valueType, short asArray, const char *typeNameParam, long options, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectFileTypes fileType, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewPropertyObjectType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyValueTypes valueType, const char *typeName, CAObjHandle elementType, short isObject, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewResultLog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewResultLogger(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyNameVal, const char *stepTypeName, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewStepType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewTypeUsageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reservedParam, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewUndoItemCreator(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EditKinds kindParam, CAObjHandle editedFileParam, const char *editDescription, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewUndoStack(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle userProfile, CAObjHandle *val);"
   "\n",
   "long TS_EngineNewWorkspaceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_EngineNotifyEndOfModalDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long modalID);"
   "\n",
   "long TS_EngineNotifyStartOfModalDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *modalID);"
   "\n",
   "long TS_EngineNotifyStartOfModalDialogEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceContextParam, short *shouldAbort, long *modalID);"
   "\n",
   "long TS_EngineOpenWorkspaceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *workspaceFilePath, long options, enum TSEnum_TypeConflictHandlerTypes handlerType, CAObjHandle *val);"
   "\n",
   "long TS_EngineParseLookupString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_EnginePostUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle executionParam, CAObjHandle threadParam, enum TSEnum_UIMessageCodes eventCode, double numericDataParam, const char *stringDataParam, struct IUnknown *activeXDataParam, short synchronous);"
   "\n",
   "long TS_EngineReadPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, short *userCancelled, enum TSEnum_TypeConflictHandlerTypes handlerType, long options, CAObjHandle *file);"
   "\n",
   "long TS_EngineRegisterModalWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceContextParam, long modalHWND, short *shouldAbort, long *modalID);"
   "\n",
   "long TS_EngineRegisterSequenceToExecuteOnCrash(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *seqFilePath, const char *seqName, long options, struct tagVARIANT reserved, long *registrationId);"
   "\n",
   "long TS_EngineRegisterUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *messageName, long *msgCode);"
   "\n",
   "long TS_EngineRegisterUIMessageCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long callbackFuncAddr);"
   "\n",
   "long TS_EngineRegisterUIMessageCallbackEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT callbackFuncAddr);"
   "\n",
   "long TS_EngineReleaseLicense(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long licenseHandle, long reserved);"
   "\n",
   "long TS_EngineReleaseSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileToRelease);"
   "\n",
   "long TS_EngineReleaseSeqFileEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileToRelease, long options, short *unloaded);"
   "\n",
   "long TS_EngineReloadGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineReloadStringResourceFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineResetTypeInstances(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle typeParam, long resetTypeInstancesOptions, short *modifiedInstances);"
   "\n",
   "long TS_EngineSaveAllModifiedSeqFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, short *completed);"
   "\n",
   "long TS_EngineSearchFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *searchString, long searchOptions, long filterOptions, long elementsToSearch, struct tagSAFEARRAY *limitToAdapters, struct tagSAFEARRAY *limitToNamedProps, struct tagSAFEARRAY *limitToPropsOfNamedTypes, struct tagSAFEARRAY *openFilesToSearch, struct tagSAFEARRAY *directoriesAndFilePaths, CAObjHandle *val);"
   "\n",
   "long TS_EngineSerializeObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *objects, long options, char **stream);"
   "\n",
   "long TS_EngineSetAlwaysGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_EngineSetAppMainHwnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long hwnd);"
   "\n",
   "long TS_EngineSetApplicationIsEditor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEditor);"
   "\n",
   "long TS_EngineSetAutoLoginSystemUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_EngineSetBreakOnRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_EngineSetBreakpointsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_EngineSetByRefCurrentWorkspaceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_EngineSetByRefMasterEngine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle masterEngine);"
   "\n",
   "long TS_EngineSetCVIAdapter_ExecuteStepsInCVI(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_EngineSetCVIAdapter_ExternalCVIPrj(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EngineSetCheckOutFilesWhenEdited(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short checkOutFiles);"
   "\n",
   "long TS_EngineSetCheckOutOnlySelectedFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short onlySelectedFiles);"
   "\n",
   "long TS_EngineSetConfigDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, short copyFilesOnEngineShutdown);"
   "\n",
   "long TS_EngineSetCurrentUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_EngineSetCurrentWorkspaceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_EngineSetDefaultAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyNameVal);"
   "\n",
   "long TS_EngineSetDefaultAdapterIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_EngineSetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isDisabled);"
   "\n",
   "long TS_EngineSetDotNetGarbageCollectionInterval(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_EngineSetEnableRemote(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_EngineSetEnableUserPrivilegeChecking(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_EngineSetExecutionMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_EngineSetFileDialogDirHistoryList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *directories);"
   "\n",
   "long TS_EngineSetInternalOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_InternalOptions option, struct tagVARIANT newValue);"
   "\n",
   "long TS_EngineSetIsRemote(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isRemoteParam);"
   "\n",
   "long TS_EngineSetLastWorkspacePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString);"
   "\n",
   "long TS_EngineSetLocationForNextDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *locationLookupString, long elementAtLocation, long selectionStart, long selectionLength);"
   "\n",
   "long TS_EngineSetMasterEngine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle masterEngine);"
   "\n",
   "long TS_EngineSetModuleProfiling(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterKeyName, short enabled);"
   "\n",
   "long TS_EngineSetOutputMessagesEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enable);"
   "\n",
   "long TS_EngineSetPersistBreakpoints(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short returnVal);"
   "\n",
   "long TS_EngineSetPersistConfigFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long TS_EngineSetPersistWatchExpressions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short returnVal);"
   "\n",
   "long TS_EngineSetProductRegistrationInfo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *userName, const char *companyName, const char *serialNumber, short *isValidInfo);"
   "\n",
   "long TS_EngineSetProfilerOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_EngineSetPromptWhenAddingFilesToSC(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short promptAddFile);"
   "\n",
   "long TS_EngineSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_EngineSetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_EngineSetRTEOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions option);"
   "\n",
   "long TS_EngineSetReloadDocsWhenOpeningWorkspace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short reloadDocs);"
   "\n",
   "long TS_EngineSetReloadWorkspaceAtStartup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short reloadWorkspace);"
   "\n",
   "long TS_EngineSetRequireUserLogin(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short requireUser);"
   "\n",
   "long TS_EngineSetSeqFileVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileVersionAutoIncrement option);"
   "\n",
   "long TS_EngineSetShowHiddenProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short show);"
   "\n",
   "long TS_EngineSetStationID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_EngineSetStationModelSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *modelPath);"
   "\n",
   "long TS_EngineSetTracingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_EngineSetTypePaletteFileList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *typePaletteFiles);"
   "\n",
   "long TS_EngineSetUIMessageDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecDelay);"
   "\n",
   "long TS_EngineSetUIMessageMinDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecDelay);"
   "\n",
   "long TS_EngineSetUIMessagePollingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_EngineSetUndoLimit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_EngineSetUseDialogForCheckOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short useDialog);"
   "\n",
   "long TS_EngineSetUseLocalizedDecimalPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_EngineSetWatchExpressionsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enable);"
   "\n",
   "long TS_EngineShouldAutoLaunchExternalReportViewer(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *filePath, short *val);"
   "\n",
   "long TS_EngineShutDown(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short final);"
   "\n",
   "long TS_EngineTerminateAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineUnloadAllModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineUnloadTypePaletteFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_EngineUnregisterModalWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long modalID);"
   "\n",
   "long TS_EngineUnregisterSequenceToExecuteOnCrash(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long registrationId);"
   "\n",
   "long TS_EngineUnserializeObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stream, long reservedParam, enum TSEnum_TypeConflictHandlerTypes handlerType, struct tagSAFEARRAY **objects);"
   "\n",
   "long TS_EngineUnserializeObjectsAndTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stream, CAObjHandle *typesUsed, long reservedParam, enum TSEnum_TypeConflictHandlerTypes handlerType, struct tagSAFEARRAY **objects);"
   "\n",
   "long TS_EngineUserNameExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *loginName, short *exists);"
   "\n",
   "long TS_EngineWriteToolMenuToDisk(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long reserved);"
   "\n",
   "long TS_EvaluationTypesGetAllowedArrayRepresentations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_EvaluationTypesGetAllowedRepresentations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_EvaluationTypesGetArrayOfNamedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_EvaluationTypesGetNamedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_EvaluationTypesGetPropertyValueTypeFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_EvaluationTypesSetAllowedArrayRepresentations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *val);"
   "\n",
   "long TS_EvaluationTypesSetAllowedRepresentations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *val);"
   "\n",
   "long TS_EvaluationTypesSetArrayOfNamedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *val);"
   "\n",
   "long TS_EvaluationTypesSetNamedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *val);"
   "\n",
   "long TS_EvaluationTypesSetPropertyValueTypeFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionAbort(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionAddExtraResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *propertyName, const char *resultPropertyName);"
   "\n",
   "long TS_ExecutionAddPostStepCustomUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long msgCode, const char *expression, long customUIMessageOptions);"
   "\n",
   "long TS_ExecutionAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionBreak(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionCancelTermination(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionClearExtraResultList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionClearSequenceDefaultValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle origSequence, enum TSEnum_SequenceDefaultValueScopes defaultValueType);"
   "\n",
   "long TS_ExecutionClearTemporaryBreakpoints(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionDeleteExtraResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *propertyName);"
   "\n",
   "long TS_ExecutionEnableCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_CallbackTypes callbackType, short newValue);"
   "\n",
   "long TS_ExecutionGetBreakOnEntry(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetBreakOnRTEForThisExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetClientFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetDiscardResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionGetErrorObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetFileGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetForegroundThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetForegroundThreadIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetInInteractiveMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetMaximumResultsPerPostResultsCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetModelPostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelPreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetModelSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetModelSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionGetNumThreads(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetOutputRecordStreams(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetOverrideNonTerminatableThreads(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetPostResultsCallbackInterval(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_ExecutionGetPostResultsCallbackMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetPostResultsCallbackOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetPostResultsCallback_PostFlushMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetPostResultsCallback_PreFlushMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_ExecutionGetRTEOptionForThisExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions *val);"
   "\n",
   "long TS_ExecutionGetReport(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetReports(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetResultObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetResultStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionGetRunTimeVariables(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetSecondsAtStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_ExecutionGetSecondsExecuting(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_ExecutionGetSecondsSuspended(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSeqFilePreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetSequenceDefaultValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle origSequence, enum TSEnum_SequenceDefaultValueScopes defaultValueType, CAObjHandle *returnVal);"
   "\n",
   "long TS_ExecutionGetSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionGetStandardResultsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStartCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionGetStates(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ExecutionRunStates *runState, enum TSEnum_ExecutionTerminationStates *termState);"
   "\n",
   "long TS_ExecutionGetStationPostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetStationPreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetTerminateNonTerminatableThreadsPrompt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionGetTerminationMonitorStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle terminationMonitorData, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_ExecutionGetThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionGetThreadIds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_ExecutionGetTimeResultsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetTracingDisabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionGetTypeMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionInitTerminationMonitor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionIsCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_CallbackTypes callbackType, short *val);"
   "\n",
   "long TS_ExecutionNewSequenceDefaultValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle origSequence, CAObjHandle *returnVal);"
   "\n",
   "long TS_ExecutionNewThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, const char *sequenceNameParam, long options, CAObjHandle sequenceContextParam, CAObjHandle sequenceArgsParam, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamClearRecordsFromReportView(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamClose(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamDefineFields(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle fieldDefinitions, const char *mapping);"
   "\n",
   "long TS_ExecutionOutputRecordStreamFlush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamGetCloseAtNextUUTOrBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamGetNumRecordsToDisplayInReportView(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle stream);"
   "\n",
   "long TS_ExecutionOutputRecordStreamRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle stream);"
   "\n",
   "long TS_ExecutionOutputRecordStreamRemoveAllStreams(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamSetActiveReport(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamSetCloseAtNextUUTOrBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamSetNumRecordsToDisplayInReportView(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamWriteRecord(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle record, const char *mapping);"
   "\n",
   "long TS_ExecutionOutputRecordStreamWriteRecordFrom(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle context, struct tagSAFEARRAY *record);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsBeginNextUUTOrBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsCloseAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsCloseAndRemoveStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *streamName);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsGetStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *streamName, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsNewStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *streamName, CAObjHandle *val);"
   "\n",
   "long TS_ExecutionOutputRecordStreamsRemoveAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionRemovePostStepCustomUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long msgCode);"
   "\n",
   "long TS_ExecutionRestart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short breakOnEntryParam);"
   "\n",
   "long TS_ExecutionRestartEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long restartOptionsParam);"
   "\n",
   "long TS_ExecutionRestartWithNewArguments(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long restartOptionsParam, CAObjHandle sequenceArgsParam);"
   "\n",
   "long TS_ExecutionResume(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionSetBreakOnRTEForThisExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetByRefClientFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ExecutionSetByRefForegroundThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ExecutionSetClientFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ExecutionSetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetDiscardResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetForegroundThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ExecutionSetForegroundThreadIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetMaximumResultsPerPostResultsCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetModelPostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetModelPreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetOverrideNonTerminatableThreads(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetPostResultsCallbackInterval(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double val);"
   "\n",
   "long TS_ExecutionSetPostResultsCallbackMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetPostResultsCallbackOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetPostResultsCallback_PostFlushMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetPostResultsCallback_PreFlushMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_ExecutionSetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_ExecutionSetRTEOptionForThisExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions val);"
   "\n",
   "long TS_ExecutionSetResultStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExecutionSetSeqFilePostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSeqFilePreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetSequenceDefaultValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle defValSequence, enum TSEnum_SequenceDefaultValueScopes defaultValueType);"
   "\n",
   "long TS_ExecutionSetStandardResultsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPostErrorCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPostFailCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPostInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPostResultCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPostStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPreInteractiveCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetStationPreStepCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetTerminateNonTerminatableThreadsPrompt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExecutionSetTimeResultsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetTracingDisabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExecutionSetTypeMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_ExecutionStepInto(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionStepOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionStepOver(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionTerminate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionTerminateInteractive(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ExecutionWaitForEnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecondTimeOut, short processWindowsMsgs, struct tagVARIANT callingExecution, short *val);"
   "\n",
   "long TS_ExecutionWaitForEndEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecondTimeOut, short processWindowsMsgs, struct tagVARIANT stepToStoreResultsIn, struct tagVARIANT callingSequenceContext, short *val);"
   "\n",
   "long TS_ExpressionEvaluate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle evaluationContext, long evaluationOptions, CAObjHandle *val);"
   "\n",
   "long TS_ExpressionGetConstantValue(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *constant);"
   "\n",
   "long TS_ExpressionGetNumTokens(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExpressionGetText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExpressionGetToken(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long tokenIndex, enum TSEnum_TokenCode *tokenCode, long *charIndex, long *numChars, char **tokenText);"
   "\n",
   "long TS_ExpressionSetText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExpressionTokenize(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, long initialParseState, long *finalParseState);"
   "\n",
   "long TS_ExpressionValidate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle evaluationContext, short checkSyntaxOnly, long evaluationOptions, char **errMsg, long *errorCharIndex, long *errorEndCharIndex, short *val);"
   "\n",
   "long TS_ExpressionValidateEvaluationType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle validEvaluationTypes, struct tagSAFEARRAY *additionalConstants, CAObjHandle evaluationContext, long evaluationOptions, char **errMsg, long *errorStartIndex, long *errorEndIndex, enum TSEnum_Error *val);"
   "\n",
   "long TS_ExternalReportViewerGetArguments(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExternalReportViewerGetAutoLaunch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ExternalReportViewerGetFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExternalReportViewerGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ExternalReportViewerSetArguments(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExternalReportViewerSetAutoLaunch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ExternalReportViewerSetFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExternalReportViewerSetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ExternalReportViewersAdd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *format, const char *path, const char *arguments, short autoLaunch);"
   "\n",
   "long TS_ExternalReportViewersGetAutoLaunchDefaultExternalViewers(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_ExternalReportViewersGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ExternalReportViewersGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *externalReportViewer);"
   "\n",
   "long TS_ExternalReportViewersGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_ExternalReportViewersRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_ExternalReportViewersSetAutoLaunchDefaultExternalViewers(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_FileInformationGetFileExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetFileFormatDisplayVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_FileInformationGetFileFormatVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_FileInformationGetFileVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val, short *success);"
   "\n",
   "long TS_FileInformationGetFileWritingFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileWritingFormats *val);"
   "\n",
   "long TS_FileInformationGetIsCVIDll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetIsCustomFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetIsDotNetAssembly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetIsPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetIsSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_FileInformationGetPropertyObjectFileType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectFileTypes *val);"
   "\n",
   "long TS_IEngineInitializationSettingsCanInitializeEngine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IEngineInitializationSettingsSetEnvironmentPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path);"
   "\n",
   "long TS_IUndoItem2GetCanRedo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItem2GetCanUndo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItem2GetEditedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItem2GetEditedObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_IUndoItem2GetLookupStrings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_IUndoItem2GetPostEditChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_IUndoItem2GetPostEditLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItem2GetPreEditChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_IUndoItem2GetPreEditLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItem2GetRedoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_IUndoItem2GetRedoEditKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EditKinds *val);"
   "\n",
   "long TS_IUndoItem2GetRefreshEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItem2GetTopObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_IUndoItem2GetUndoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_IUndoItem2GetUndoEditKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EditKinds *val);"
   "\n",
   "long TS_IUndoItem2GetUndoStack(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItem2Redo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_IUndoItem2SetRefreshEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_IUndoItem2SetUndoStack(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_IUndoItem2Undo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_IUndoItemGetCanRedo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItemGetCanUndo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItemGetEditedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItemGetEditedObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_IUndoItemGetPostEditChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_IUndoItemGetPostEditLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItemGetPreEditChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_IUndoItemGetPreEditLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItemGetRedoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_IUndoItemGetRedoEditKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EditKinds *val);"
   "\n",
   "long TS_IUndoItemGetRefreshEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_IUndoItemGetUndoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_IUndoItemGetUndoEditKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EditKinds *val);"
   "\n",
   "long TS_IUndoItemGetUndoStack(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_IUndoItemRedo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_IUndoItemSetRefreshEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_IUndoItemSetUndoStack(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_IUndoItemUndo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ImagesFindImage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *iconName, long desiredWidth, long desiredHeight, struct IUnknown **val);"
   "\n",
   "long TS_ImagesGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ImagesGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long imageIndex, struct IUnknown **val);"
   "\n",
   "long TS_InputRecordStreamClose(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_InputRecordStreamGetFieldMapping(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_InputRecordStreamReadRecord(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle record, const char *mapping, long *returnValue);"
   "\n",
   "long TS_InputRecordStreamReadRecordTo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle context, struct tagSAFEARRAY *record, long *returnValue);"
   "\n",
   "long TS_InputRecordStreamSetFieldMapping(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_InputRecordStreamSkipRecords(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long numRecords, long *returnValue);"
   "\n",
   "long TS_InputStreamGetIsEndofStream(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *endofStream);"
   "\n",
   "long TS_InputStreamGetLength(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InputStreamGetOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InputStreamGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_InputStreamReadBytes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long numBytes, struct tagSAFEARRAY **bytes);"
   "\n",
   "long TS_InputStreamSetOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_InteractiveArgsAddStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long stepIndexParam);"
   "\n",
   "long TS_InteractiveArgsAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_InteractiveArgsClearStepList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_InteractiveArgsContainsStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long stepIndexParam, short *val);"
   "\n",
   "long TS_InteractiveArgsGetLoopCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InteractiveArgsGetNumSteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InteractiveArgsGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_InteractiveArgsGetSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_InteractiveArgsGetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *val);"
   "\n",
   "long TS_InteractiveArgsGetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayIndexParam, long *val);"
   "\n",
   "long TS_InteractiveArgsGetStopExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_InteractiveArgsSetByRefSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_InteractiveArgsSetLoopCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_InteractiveArgsSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_InteractiveArgsSetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_InteractiveArgsSetSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_InteractiveArgsSetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups val);"
   "\n",
   "long TS_InteractiveArgsSetStopExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_InteractiveContextAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_InteractiveContextGetInteractiveArgs(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_InteractiveContextGetIsRootExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_InteractiveContextGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_InteractiveContextGetSavedNextStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InteractiveContextGetSavedPreviousStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InteractiveContextGetSavedStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_InteractiveContextSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_LocationGetAttributesPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetBaseAttributesPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetContextId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetElement(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectElements *val);"
   "\n",
   "long TS_LocationGetExecutionDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetExecutionId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetFileDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetFileId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_LocationKinds *val);"
   "\n",
   "long TS_LocationGetPropertyPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetPropertyPathWithNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetSelLength(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetSelStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetSequenceName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *val);"
   "\n",
   "long TS_LocationGetStepId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetStepName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetThreadDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationGetThreadId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationGetTypeCategory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeCategories *val);"
   "\n",
   "long TS_LocationGetTypeName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationSetAttributesPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetBaseAttributesPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetContextId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetElement(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectElements val);"
   "\n",
   "long TS_LocationSetExecutionDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetExecutionId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetFileDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetFileId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetKind(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_LocationKinds val);"
   "\n",
   "long TS_LocationSetPropertyPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetPropertyPathWithNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetSelLength(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetSelStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetSequenceName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups val);"
   "\n",
   "long TS_LocationSetStepId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetStepName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetThreadDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationSetThreadId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_LocationSetTypeCategory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeCategories val);"
   "\n",
   "long TS_LocationSetTypeName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationsAddAPILocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle baseObj, enum TSEnum_APILocations apiLocation, CAObjHandle objFile, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddExecutionLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle seqContext, const char *lookupString, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddExecutionLocationByObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle seqContext, CAObjHandle obj, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddFileLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle file, const char *lookupString, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddFileLocationByObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle obj, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle locationsToAdd, enum TSEnum_CopyLocationsOptions copyLocationOption);"
   "\n",
   "long TS_LocationsAddTypeLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle file, CAObjHandle rootTypeDef, const char *lookupString, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsAddTypeLocationByObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle file, CAObjHandle obj, enum TSEnum_PropertyObjectElements elem, long selectionStart, long selectionLength, CAObjHandle *val);"
   "\n",
   "long TS_LocationsClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_LocationsFromPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_LocationsGetApplicationSite(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ApplicationSites *val);"
   "\n",
   "long TS_LocationsGetCanDisplayDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_LocationsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_LocationsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_LocationsGetLocationFound(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_LocationsGetLocationNotFoundMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_LocationsGetUserData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *val);"
   "\n",
   "long TS_LocationsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_LocationsGotoLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options);"
   "\n",
   "long TS_LocationsGotoLocationInApplication(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *applicationPath, long options);"
   "\n",
   "long TS_LocationsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_LocationsSetApplicationSite(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ApplicationSites val);"
   "\n",
   "long TS_LocationsSetCanDisplayDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_LocationsSetLocationFound(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_LocationsSetLocationNotFoundMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_LocationsSetUserData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT val);"
   "\n",
   "long TS_LocationsToPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ModuleAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ModuleClearUnmappedArgumentValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ModuleCreateCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleEditCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleGetAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ModuleGetCanCreateCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleGetCanEditCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleGetCanSpecify(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleGetDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, char **val);"
   "\n",
   "long TS_ModuleGetIsPrototypeIncompatible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ModuleGetLastLoadWarnings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **loadWarnings);"
   "\n",
   "long TS_ModuleGetStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ModuleGetUnmappedArgumentValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *propertyValue);"
   "\n",
   "long TS_ModuleLoad(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long loadOptions, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_ModuleLoadPrototype(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, short *val);"
   "\n",
   "long TS_ModuleSpecify(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long specModOptions, short *val);"
   "\n",
   "long TS_ModuleUnload(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_NewEngine(const char *server, CAObjHandle *objectHandle);"
   "\n",
   "long TS_NewEngineEnvironment(const char *server, CAObjHandle *objectHandle);"
   "\n",
   "long TS_NewEngineInitializationSettings(const char *server, CAObjHandle *objectHandle);"
   "\n",
   "long TS_OutputMessageAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_OutputMessageGetCategory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_OutputMessageGetExecutionLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_OutputMessageGetFileLocations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_OutputMessageGetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_OutputMessageGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_OutputMessageGetMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_OutputMessageGetSeverity(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_OutputMessageSeverityTypes *val);"
   "\n",
   "long TS_OutputMessageGetTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *val);"
   "\n",
   "long TS_OutputMessageGetTimeInSeconds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_OutputMessageGetTimeStamp(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_OutputMessagePost(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_OutputMessageSetCategory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_OutputMessageSetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_OutputMessageSetMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_OutputMessageSetSeverity(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_OutputMessageSeverityTypes val);"
   "\n",
   "long TS_OutputMessageSetTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long val);"
   "\n",
   "long TS_OutputMessageSetTimeInSeconds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double val);"
   "\n",
   "long TS_OutputMessageSetTimeStamp(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double val);"
   "\n",
   "long TS_OutputMessagesAdd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle outputMessage);"
   "\n",
   "long TS_OutputMessagesClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_OutputMessagesCopyMessagesToCollection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle target);"
   "\n",
   "long TS_OutputMessagesFindIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long outputMessageId, long *val);"
   "\n",
   "long TS_OutputMessagesFromPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_OutputMessagesGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_OutputMessagesGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *outputMessage);"
   "\n",
   "long TS_OutputMessagesGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_OutputMessagesRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_OutputMessagesToPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short storeExecutionLocations, CAObjHandle *val);"
   "\n",
   "long TS_OutputMessagesTransferMessagesToCollection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle target);"
   "\n",
   "long TS_OutputRecordStreamClose(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_OutputRecordStreamFlush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_OutputRecordStreamGetStreamInfo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **streamDescription, char **retVal);"
   "\n",
   "long TS_OutputRecordStreamWriteRecord(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle record, const char *mapping);"
   "\n",
   "long TS_OutputRecordStreamWriteRecordFrom(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle context, struct tagSAFEARRAY *record);"
   "\n",
   "long TS_PropertyClearTypeDefinitionPasswordHistory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_PropertyClone(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyContainsTypeInstance(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *typeNameParam, short *val);"
   "\n",
   "long TS_PropertyCreateReportSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long generationOptions, long initialIndentation, const char *defaultName, const char *formatString, const char *format, CAObjHandle *val);"
   "\n",
   "long TS_PropertyDeleteElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long numElements, long options);"
   "\n",
   "long TS_PropertyDeleteNthSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long index, long options);"
   "\n",
   "long TS_PropertyDeleteSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options);"
   "\n",
   "long TS_PropertyDisplayArrayBoundsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, short *val);"
   "\n",
   "long TS_PropertyDisplayAttributesDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle file, long dlgOptions, short *val);"
   "\n",
   "long TS_PropertyDisplayEditNumericFormatDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, short *validFormat, long dlgOptions, short *pressedOK);"
   "\n",
   "long TS_PropertyDisplayFlagsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, long *val);"
   "\n",
   "long TS_PropertyDisplayPropertiesDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle file, long dlgOptions, long *val);"
   "\n",
   "long TS_PropertyEnumIsValid(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyEvaluate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *exprString, CAObjHandle *val);"
   "\n",
   "long TS_PropertyEvaluateEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *exprString, long evaluationOptions, CAObjHandle *val);"
   "\n",
   "long TS_PropertyExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, short *val);"
   "\n",
   "long TS_PropertyGetArrayElementPrototype(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetArrayIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long arrayOffset, char **val);"
   "\n",
   "long TS_PropertyGetArrayOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *arrayIndex, long *val);"
   "\n",
   "long TS_PropertyGetAttributes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetCanAddSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetComment(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetDimensions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, char **lowerBounds, char **upperBounds, long *numElements, enum TSEnum_PropertyValueTypes *elementType);"
   "\n",
   "long TS_PropertyGetDisplayNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, char **propDisplayName, char **valueDisplayName);"
   "\n",
   "long TS_PropertyGetEnumerators(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long *val);"
   "\n",
   "long TS_PropertyGetFormattedValue(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *formatString, short useValueFormatIfDefined, const char *separator, char **val);"
   "\n",
   "long TS_PropertyGetHasAttributes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetHasTypeAttributes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetInstanceDefaultFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long *val);"
   "\n",
   "long TS_PropertyGetInstanceOverrideFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long *val);"
   "\n",
   "long TS_PropertyGetInternalPtr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *engineId, long *val);"
   "\n",
   "long TS_PropertyGetInternalPtrEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *engineId, struct tagVARIANT *val);"
   "\n",
   "long TS_PropertyGetIsModifiedType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetIsRootTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetIsTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle topObject, char **val);"
   "\n",
   "long TS_PropertyGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetNthSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long index, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetNthSubPropertyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long index, long options, char **val);"
   "\n",
   "long TS_PropertyGetNumElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyGetNumSubProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long *val);"
   "\n",
   "long TS_PropertyGetNumericFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetParent(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_PropertyGetPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetPropertyObjectByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetPropertyObjectElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_PropertyGetStructureChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long *val);"
   "\n",
   "long TS_PropertyGetSubProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_PropertyGetSubPropertyIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *propName, long *val);"
   "\n",
   "long TS_PropertyGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, short *isObject, short *isArray, char **typeNameParam, enum TSEnum_PropertyValueTypes *val);"
   "\n",
   "long TS_PropertyGetTypeAttributes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetTypeCategory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeCategories *val);"
   "\n",
   "long TS_PropertyGetTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetTypeDefinitionLocked(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyGetTypeDefinitionProtection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyGetTypeDisplayString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, char **val);"
   "\n",
   "long TS_PropertyGetTypeFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long *val);"
   "\n",
   "long TS_PropertyGetTypeLastModified(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetTypeMinimumTestStandVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetTypeProp(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetTypeVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyGetValBinary(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_PropertyGetValBoolean(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, short *val);"
   "\n",
   "long TS_PropertyGetValBooleanByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, short *val);"
   "\n",
   "long TS_PropertyGetValIDispatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetValIDispatchByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, CAObjHandle *val);"
   "\n",
   "long TS_PropertyGetValInteger64(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long long *val);"
   "\n",
   "long TS_PropertyGetValInteger64ByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, long long *val);"
   "\n",
   "long TS_PropertyGetValInterface(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct IUnknown **val);"
   "\n",
   "long TS_PropertyGetValInterfaceByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, struct IUnknown **val);"
   "\n",
   "long TS_PropertyGetValNumber(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, double *val);"
   "\n",
   "long TS_PropertyGetValNumberByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, double *val);"
   "\n",
   "long TS_PropertyGetValString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, char **val);"
   "\n",
   "long TS_PropertyGetValStringByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, char **val);"
   "\n",
   "long TS_PropertyGetValUnsignedInteger64(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, unsigned long long *val);"
   "\n",
   "long TS_PropertyGetValUnsignedInteger64ByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, unsigned long long *val);"
   "\n",
   "long TS_PropertyGetValVariant(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagVARIANT *val);"
   "\n",
   "long TS_PropertyGetValVariantByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, struct tagVARIANT *val);"
   "\n",
   "long TS_PropertyGetValueDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, char **valueDisplayName);"
   "\n",
   "long TS_PropertyGetXML(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long generationOptions, long initialIndentation, const char *defaultName, const char *formatString, char **val);"
   "\n",
   "long TS_PropertyInsertElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long numElements, long options);"
   "\n",
   "long TS_PropertyInsertSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long index, CAObjHandle subProperty);"
   "\n",
   "long TS_PropertyIsAliasObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, short *val);"
   "\n",
   "long TS_PropertyIsEqualTo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle objectToCompare, long options, short *val);"
   "\n",
   "long TS_PropertyLockTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_PropertyNewSubProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, enum TSEnum_PropertyValueTypes valueType, short asArray, const char *typeNameParam, long options);"
   "\n",
   "long TS_PropertyObjectFileAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectFileCheckForModifiedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, const char *okButtonText, long options, enum TSEnum_TypeVersionAutoIncrement versionIncOption, short *operationCanceled, short *foundModifiedTypes);"
   "\n",
   "long TS_PropertyObjectFileGetChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetComment(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetContentType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectFileGetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetEditPrivilege(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetFileSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetFileType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyObjectFileTypes *val);"
   "\n",
   "long TS_PropertyObjectFileGetFileTypeDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetFileWritingFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileWritingFormats *val);"
   "\n",
   "long TS_PropertyObjectFileGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetIsDiskFileModified(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetIsDiskFileReadOnly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyObjectFileGetIsModified(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyObjectFileGetIsModifiedByUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyObjectFileGetLastSavedChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetLocked(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyObjectFileGetOpenStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_PropertyObjectFileGetProtection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_PropertyObjectFileGetRequirements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectFileGetTypeUsageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectFileGetVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectFileHandleTypeConflicts(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeConflictHandlerTypes handlerType, short *val);"
   "\n",
   "long TS_PropertyObjectFileIncChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_PropertyObjectFileLock(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT passwordString);"
   "\n",
   "long TS_PropertyObjectFileReadFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeConflictHandlerTypes handlerType, short *val);"
   "\n",
   "long TS_PropertyObjectFileSaveFileIfModified(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short prompt, short *val);"
   "\n",
   "long TS_PropertyObjectFileSetByRefData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_PropertyObjectFileSetChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_PropertyObjectFileSetComment(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetContentType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_PropertyObjectFileSetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetEditPrivilege(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetFileSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetFileTypeDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetFileWritingFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileWritingFormats val);"
   "\n",
   "long TS_PropertyObjectFileSetOpenStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_PropertyObjectFileSetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_PropertyObjectFileSetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_PropertyObjectFileSetProtection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_PropertyObjectFileSetVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertyObjectFileUnlock(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *passwordString);"
   "\n",
   "long TS_PropertyObjectFileWriteFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WriteFileFormat writeFormat);"
   "\n",
   "long TS_PropertyObjectTypeGetArrayDimensions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectTypeGetClassName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectTypeGetDisplayString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectTypeGetElementType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_PropertyObjectTypeGetIsObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_PropertyObjectTypeGetRepresentation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyRepresentations *val);"
   "\n",
   "long TS_PropertyObjectTypeGetTypeName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_PropertyObjectTypeGetValueType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyValueTypes *val);"
   "\n",
   "long TS_PropertyObjectTypeIsEqualTo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle propObjType, long options, short *val);"
   "\n",
   "long TS_PropertyObjectTypeSetRepresentation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyRepresentations val);"
   "\n",
   "long TS_PropertyRead(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString, const char *objectName, long RWoptions);"
   "\n",
   "long TS_PropertyReadEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString, const char *objectName, long RWoptions, enum TSEnum_TypeConflictHandlerTypes handlerType);"
   "\n",
   "long TS_PropertySearch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, const char *searchString, long searchOptions, long filterOptions, long elementsToSearch, struct tagSAFEARRAY *limitToAdapters, struct tagSAFEARRAY *limitToNamedProps, struct tagSAFEARRAY *limitToPropsOfNamedTypes, struct tagSAFEARRAY *subpropLookupStringsToExclude, CAObjHandle *val);"
   "\n",
   "long TS_PropertySerialize(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **stream, const char *objectName, long RWoptions);"
   "\n",
   "long TS_PropertySetArrayElementPrototype(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_PropertySetByRefArrayElementPrototype(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_PropertySetComment(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertySetDimensions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *lowerBounds, const char *upperBounds);"
   "\n",
   "long TS_PropertySetFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long flags);"
   "\n",
   "long TS_PropertySetInstanceDefaultFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long flags);"
   "\n",
   "long TS_PropertySetInstanceOverrideFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long flags);"
   "\n",
   "long TS_PropertySetIsModifiedType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_PropertySetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertySetNthSubPropertyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long index, long options, const char *newValue);"
   "\n",
   "long TS_PropertySetNumElements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long numElements, long options);"
   "\n",
   "long TS_PropertySetNumericFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertySetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_PropertySetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_PropertySetPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle newValue);"
   "\n",
   "long TS_PropertySetPropertyObjectByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, CAObjHandle newValue);"
   "\n",
   "long TS_PropertySetSubPropertyIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *propName, long index);"
   "\n",
   "long TS_PropertySetTypeDefinitionProtection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long newValue, struct tagVARIANT passwordString);"
   "\n",
   "long TS_PropertySetTypeFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long flags);"
   "\n",
   "long TS_PropertySetTypeMinimumTestStandVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertySetTypeVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_PropertySetValBinary(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagSAFEARRAY *newValue);"
   "\n",
   "long TS_PropertySetValBoolean(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, short newValue);"
   "\n",
   "long TS_PropertySetValBooleanByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, short newValue);"
   "\n",
   "long TS_PropertySetValIDispatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, CAObjHandle newValue);"
   "\n",
   "long TS_PropertySetValIDispatchByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, CAObjHandle newValue);"
   "\n",
   "long TS_PropertySetValInteger64(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, long long newValue);"
   "\n",
   "long TS_PropertySetValInteger64ByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, long long newValue);"
   "\n",
   "long TS_PropertySetValInterface(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct IUnknown *newValue);"
   "\n",
   "long TS_PropertySetValInterfaceByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, struct IUnknown *newValue);"
   "\n",
   "long TS_PropertySetValNumber(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, double newValue);"
   "\n",
   "long TS_PropertySetValNumberByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, double newValue);"
   "\n",
   "long TS_PropertySetValString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, const char *newValue);"
   "\n",
   "long TS_PropertySetValStringByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, const char *newValue);"
   "\n",
   "long TS_PropertySetValUnsignedInteger64(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, unsigned long long newValue);"
   "\n",
   "long TS_PropertySetValUnsignedInteger64ByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, unsigned long long newValue);"
   "\n",
   "long TS_PropertySetValVariant(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, long options, struct tagVARIANT newValue);"
   "\n",
   "long TS_PropertySetValVariantByOffset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long arrayOffset, long options, struct tagVARIANT newValue);"
   "\n",
   "long TS_PropertySetXML(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *xmlStream, long reserved1, enum TSEnum_TypeConflictHandlerTypes reserved2);"
   "\n",
   "long TS_PropertyUnlockTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *passwordString);"
   "\n",
   "long TS_PropertyUnserialize(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stream, const char *objectName, long RWoptions);"
   "\n",
   "long TS_PropertyUnserializeEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stream, const char *objectName, long RWoptions, enum TSEnum_TypeConflictHandlerTypes handlerType);"
   "\n",
   "long TS_PropertyUpdateEnumerators(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle newValues, short *returnValue);"
   "\n",
   "long TS_PropertyValidateNewElementName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newName, short allowDuplicates, short *isValid, char **val);"
   "\n",
   "long TS_PropertyValidateNewName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newName, short allowDuplicates, short *isValid, char **val);"
   "\n",
   "long TS_PropertyValidateNewSubPropertyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newName, short allowDuplicates, short *isValid, char **val);"
   "\n",
   "long TS_PropertyWrite(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString, const char *objectName, long RWoptions);"
   "\n",
   "long TS_ReportAppend(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stringToAppend, long *val);"
   "\n",
   "long TS_ReportAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ReportGetAll(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportGetFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportGetIsEmpty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ReportGetLatestAppendIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportGetLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_ReportGetReportSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ReportGetResetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportGetSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long oldestIndex, long latestIndex, char **val);"
   "\n",
   "long TS_ReportGetStyleSheetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportGetSuspendReportRefresh(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ReportGetTempFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ReportConversion linefeedConversion, struct tagVARIANT extensionString, char **val);"
   "\n",
   "long TS_ReportGetTempFileDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportLaunchViewer(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ReportConversion linefeedConversion);"
   "\n",
   "long TS_ReportLoad(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString, enum TSEnum_ReportConversion linefeedConversion);"
   "\n",
   "long TS_ReportNewReportSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ReportRefreshDisplay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ReportReset(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newValue, long *val);"
   "\n",
   "long TS_ReportSave(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString, short appendIfAlreadyExists, enum TSEnum_ReportConversion linefeedConversion);"
   "\n",
   "long TS_ReportSectionGetAllText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportSectionGetBody(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportSectionGetFooter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportSectionGetHeader(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ReportSectionGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportSectionGetIsEmpty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ReportSectionGetReportSubsections(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ReportSectionSetBody(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSectionSetFooter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSectionSetHeader(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSectionSetReportSubsections(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ReportSectionsClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ReportSectionsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportSectionsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *rptSection);"
   "\n",
   "long TS_ReportSectionsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_ReportSectionsInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, const char *header, const char *body, const char *footer, CAObjHandle *rptSection);"
   "\n",
   "long TS_ReportSectionsInsertExisting(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val, long index);"
   "\n",
   "long TS_ReportSectionsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_ReportSetFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSetLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_ReportSetReportSection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ReportSetStyleSheetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSetSuspendReportRefresh(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ReportSetTempFileDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ReportSetTempFileDirectoryEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *directory, enum TSEnum_SetTempFileDirectoryOptions tempFileDirectoryOption);"
   "\n",
   "long TS_ReportSetTemporaryFileDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *directory, enum TSEnum_SetTempFileDirectoryOptions tempFileDirectoryOption);"
   "\n",
   "long TS_ReportsClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ReportsGetActiveReport(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ReportsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ReportsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *val);"
   "\n",
   "long TS_ReportsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_ReportsInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_ReportsInsertExisting(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val, long index);"
   "\n",
   "long TS_ReportsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_ReportsReplace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle oldVal, CAObjHandle newVal, CAObjHandle *val);"
   "\n",
   "long TS_ReportsSetByRefActiveReport(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_ResultLogClose(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ResultLogGetClosedWhenWritten(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ResultLogGetOnTheFly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ResultLogGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ResultLogGetReportPaths(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *pathStringArray);"
   "\n",
   "long TS_ResultLogGetSecondsAtStartIn1970UniversalCoordinatedTime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_ResultLogGetSimulateOnTheFly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ResultLogGetUniqueId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ResultLogOpen(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path);"
   "\n",
   "long TS_ResultLogReadNextRecord(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ResultLogRecordTypes *resultLogRecordType, long *executionId, long *threadId, struct tagSAFEARRAY **objects, short *val);"
   "\n",
   "long TS_ResultLogSetReportPaths(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle pathStringArray);"
   "\n",
   "long TS_ResultLogSetSimulateOnTheFly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ResultLoggerClose(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ResultLoggerContinueInNewFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path);"
   "\n",
   "long TS_ResultLoggerDeferrableRename(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, short *retVal);"
   "\n",
   "long TS_ResultLoggerFlush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ResultLoggerGetFilesWritten(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short clear, CAObjHandle *val);"
   "\n",
   "long TS_ResultLoggerGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ResultLoggerGetRecordFilesWritten(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ResultLoggerLogBatchDone(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelData, CAObjHandle uut, const char *uutStatus);"
   "\n",
   "long TS_ResultLoggerLogBatchStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelThreadType, CAObjHandle modelData, const char *processModelClientPath, CAObjHandle startDate, CAObjHandle startTime, CAObjHandle uut);"
   "\n",
   "long TS_ResultLoggerLogBegin(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle parentThread, CAObjHandle modelThreadType, CAObjHandle modelData, const char *processModelClientPath, long numberOfSockets, long socketIndex);"
   "\n",
   "long TS_ResultLoggerLogEnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelData);"
   "\n",
   "long TS_ResultLoggerLogOnTheFlyStepResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle uut, CAObjHandle steps, CAObjHandle results, CAObjHandle callbackNames, CAObjHandle parentIds);"
   "\n",
   "long TS_ResultLoggerLogPostBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelData, CAObjHandle uut, const char *uutStatus);"
   "\n",
   "long TS_ResultLoggerLogPostUUT(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelData, CAObjHandle uut, const char *uutStatus);"
   "\n",
   "long TS_ResultLoggerLogPreBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelThreadType, CAObjHandle modelData, const char *processModelClientPath, CAObjHandle startDate, CAObjHandle startTime, CAObjHandle uut, short continueTesting);"
   "\n",
   "long TS_ResultLoggerLogPreUUT(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelThreadType, CAObjHandle modelData, const char *processModelClientPath, CAObjHandle startDate, CAObjHandle startTime, CAObjHandle uut, short continueTesting);"
   "\n",
   "long TS_ResultLoggerLogUUTDone(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelData, CAObjHandle uut, const char *uutStatus, CAObjHandle uutResult);"
   "\n",
   "long TS_ResultLoggerLogUUTStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle thread, CAObjHandle modelThreadType, CAObjHandle modelData, const char *processModelClientPath, CAObjHandle startDate, CAObjHandle startTime, CAObjHandle uut);"
   "\n",
   "long TS_ResultLoggerOpen(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, short isOnTheFly, short logInSeparateThread);"
   "\n",
   "long TS_ResultLoggerSetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_ResultLoggerSetRecordFilesWritten(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_RunTimeMenuItemGetEditsSelectedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_RunTimeMenuItemGetItemEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_RunTimeMenuItemGetSeparatorBefore(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_RunTimeMenuItemGetSubMenuItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_RunTimeMenuItemGetText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_RunTimeMenuItemInvokeItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT editArgsParam, long reserved);"
   "\n",
   "long TS_RunTimeMenuItemsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_RunTimeMenuItemsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *menuItem);"
   "\n",
   "long TS_RunTimeMenuItemsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_SearchDirectoriesGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SearchDirectoriesGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *searchDirectory);"
   "\n",
   "long TS_SearchDirectoriesGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_SearchDirectoriesInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, long index, short searchSubDirs, const char *fileExtRestrict, short exclude, short disabled);"
   "\n",
   "long TS_SearchDirectoriesMoveSearchDirectory(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, long newIndex);"
   "\n",
   "long TS_SearchDirectoriesReload(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_SearchDirectoriesRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_SearchDirectoryGetDisabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SearchDirectoryGetExcludeFileExtension(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SearchDirectoryGetExcludeHiddenSubdirectories(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SearchDirectoryGetFileExtensionRestrictions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchDirectoryGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchDirectoryGetSearchSubdirectories(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SearchDirectoryGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SearchDirectoryTypes *val);"
   "\n",
   "long TS_SearchDirectorySetDisabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SearchDirectorySetExcludeFileExtension(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SearchDirectorySetExcludeHiddenSubdirectories(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SearchDirectorySetFileExtensionRestrictions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SearchDirectorySetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SearchDirectorySetSearchSubdirectories(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SearchMatchGetFileDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchMatchGetFileId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SearchMatchGetFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchMatchGetLocation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *matchElement, long *matchStart, long *matchLength);"
   "\n",
   "long TS_SearchMatchGetMatchIsValid(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SearchMatchGetMatchedText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchMatchGetPropertyPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short useNamesForIndices, char **val);"
   "\n",
   "long TS_SearchMatchGetPropertyValueAsString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchMatchGetPropertyValueType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_PropertyValueTypes *val);"
   "\n",
   "long TS_SearchMatchGetTypeCategoryOfMatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeCategories *val);"
   "\n",
   "long TS_SearchMatchGetUserData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SearchMatchSetUserData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SearchMatchUpdateForReplace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *replacementString);"
   "\n",
   "long TS_SearchMatchUpdateForReplaceValue(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newValue);"
   "\n",
   "long TS_SearchResultsCancel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short waitForComplete, short processWindowsMsgsWhileWaiting);"
   "\n",
   "long TS_SearchResultsGetMatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_SearchResultsGetNumMatches(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SearchResultsGetNumWarnings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SearchResultsGetStatusMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SearchResultsGetWarning(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, char **val);"
   "\n",
   "long TS_SearchResultsIsComplete(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short waitForComplete, short processWindowsMsgsWhileWaiting, short *val);"
   "\n",
   "long TS_SelectedBreakpointItemGetSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *selectedFileParam);"
   "\n",
   "long TS_SelectedBreakpointItemGetSequenceName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **selectedSequenceNameParam);"
   "\n",
   "long TS_SelectedBreakpointItemGetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *selectedStepGroupParam);"
   "\n",
   "long TS_SelectedBreakpointItemGetStepId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **selectedStepIdParam);"
   "\n",
   "long TS_SelectedBreakpointItemIsEndSelected(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextCanTrace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetApplicationIsEditor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetCallStackDepth(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetCallStackName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SeqContextGetCaller(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetCallerDiscardsResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetCallingStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetEngine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetEngineAsDispatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetErrorReported(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetFileGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetGotoCleanup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetInInteractiveMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetInteractiveContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetIsProcessModel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetLocals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetLoopIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetLoopNumFailed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetLoopNumIterations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetLoopNumPassed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetMain(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetMultipleValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, enum TSEnum_PropertyObjectElements elem, long *val);"
   "\n",
   "long TS_SeqContextGetNextStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetNextStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetNumStepsExecuted(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetParameters(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetPreviousStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetPreviousStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetProcessModelClient(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_SeqContextGetReport(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetRoot(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetRunTimeErrorMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SeqContextGetRunTimeErrorMessageEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **detailsMsg, char **errorCodeMsg, char **locationMsg);"
   "\n",
   "long TS_SeqContextGetRunTimeErrorWinHelpInfo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *helpID, char **helpFile);"
   "\n",
   "long TS_SeqContextGetSelectedExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetSelectedFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetSelectedPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *propertyFile);"
   "\n",
   "long TS_SeqContextGetSelectedPropertyObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *val);"
   "\n",
   "long TS_SeqContextGetSelectedSequences(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *val);"
   "\n",
   "long TS_SeqContextGetSelectedStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *stepGroup);"
   "\n",
   "long TS_SeqContextGetSelectedSteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *val);"
   "\n",
   "long TS_SeqContextGetSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetSequenceErrorCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *errorCode);"
   "\n",
   "long TS_SeqContextGetSequenceErrorMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SeqContextGetSequenceErrorOccurred(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *occurredFlag);"
   "\n",
   "long TS_SeqContextGetSequenceFailed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetSequenceIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetStationGlobals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *val);"
   "\n",
   "long TS_SeqContextGetStepGroupStartedInteractiveExe(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextGetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqContextGetThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextGetTracing(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqContextIsInteractiveStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long stepIndexParam, short *val);"
   "\n",
   "long TS_SeqContextIsStepExcludedFromExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle step, short *val);"
   "\n",
   "long TS_SeqContextNewExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, const char *sequenceNameParam, CAObjHandle processModelParam, short breakAtFirstStep, short synchronous, long executionTypeMaskParam, CAObjHandle sequenceArgsParam, CAObjHandle *val);"
   "\n",
   "long TS_SeqContextSetErrorReported(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SeqContextSetGotoCleanup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SeqContextSetLoopIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetLoopNumFailed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetLoopNumIterations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetLoopNumPassed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetMultipleValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *lookupString, enum TSEnum_PropertyObjectElements elem, long multipleValues);"
   "\n",
   "long TS_SeqContextSetNextStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetNumStepsExecuted(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetPreviousStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetProcessModelClient(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_SeqContextSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_SeqContextSetSelectedStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroup);"
   "\n",
   "long TS_SeqContextSetSequenceErrorCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long errorCode);"
   "\n",
   "long TS_SeqContextSetSequenceErrorMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SeqContextSetSequenceErrorOccurred(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short occurredFlag);"
   "\n",
   "long TS_SeqContextSetSequenceFailed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SeqContextSetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups val);"
   "\n",
   "long TS_SeqContextSetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_SeqContextSetTracing(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SeqFileAddLoadReference(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_SeqFileAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileAsPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileCreateCbackOverrideSeq(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *callbackName, short allowCopyDefaultSteps, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileDeleteSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index);"
   "\n",
   "long TS_SeqFileGetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SeqFileBatchSynchronizationOptions *val);"
   "\n",
   "long TS_SeqFileGetCanUnload(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqFileGetChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqFileGetFileGlobalsDefaultValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileGetFileGlobalsScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileGlobalsScopeOptions *val);"
   "\n",
   "long TS_SeqFileGetHasModel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqFileGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqFileGetIsExecuting(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqFileGetModelAbsolutePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *modelExists, char **val);"
   "\n",
   "long TS_SeqFileGetModelCallbackNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **returnList);"
   "\n",
   "long TS_SeqFileGetModelOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModelOptions *val);"
   "\n",
   "long TS_SeqFileGetModelPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SeqFileGetModelPluginDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileGetModelSeqFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **modelDescriptionString, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileGetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions *val);"
   "\n",
   "long TS_SeqFileGetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions *val);"
   "\n",
   "long TS_SeqFileGetNumSequences(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SeqFileGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SeqFileGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_SeqFileGetReservedCallbackNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **returnList);"
   "\n",
   "long TS_SeqFileGetSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileGetSequenceByName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileGetSequenceFileType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SequenceFileTypes *val);"
   "\n",
   "long TS_SeqFileGetSequenceIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam, long *val);"
   "\n",
   "long TS_SeqFileGetUnloadCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SeqFileIncChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_SeqFileInsertSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceToInsert);"
   "\n",
   "long TS_SeqFileInsertSequenceEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle sequenceToInsert);"
   "\n",
   "long TS_SeqFileLoadModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long loadOptions, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_SeqFileNewEditContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileRemoveSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_SeqFileSave(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *pathString);"
   "\n",
   "long TS_SeqFileSequenceNameExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam, short *val);"
   "\n",
   "long TS_SeqFileSetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SeqFileBatchSynchronizationOptions val);"
   "\n",
   "long TS_SeqFileSetFileGlobalsScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileGlobalsScopeOptions val);"
   "\n",
   "long TS_SeqFileSetModelOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModelOptions val);"
   "\n",
   "long TS_SeqFileSetModelPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SeqFileSetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions val);"
   "\n",
   "long TS_SeqFileSetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions val);"
   "\n",
   "long TS_SeqFileSetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SeqFileSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_SeqFileSetSequenceFileType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SequenceFileTypes val);"
   "\n",
   "long TS_SeqFileSetUnloadCallbackEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SeqFileUnloadModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SequenceCreateNewUniqueStepIds(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_SequenceDeleteStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, enum TSEnum_StepGroups stepGroupParam);"
   "\n",
   "long TS_SequenceEvalEntryPtEnabledExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, short *val);"
   "\n",
   "long TS_SequenceEvalEntryPtEnabledExprEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle editArgs, short *val);"
   "\n",
   "long TS_SequenceEvalEntryPtNameExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle sequenceFileParam, char **val);"
   "\n",
   "long TS_SequenceEvalEntryPtNameExprEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle editArgs, char **val);"
   "\n",
   "long TS_SequenceGetAllowInteractiveExecutionOfEntryPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetBreakOnEnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam, struct tagVARIANT executionParam, short *val);"
   "\n",
   "long TS_SequenceGetBreakOnEndSettings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam, short *isSet, short *enabled, long *passCount, char **conditionExpr, struct tagVARIANT executionParam);"
   "\n",
   "long TS_SequenceGetCopyStepsOnOverride(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetEffectiveType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SequenceTypes *val);"
   "\n",
   "long TS_SequenceGetEntryPointCheckToSaveTitledSeqFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetEntryPointEnabledExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SequenceGetEntryPointIgnoreClient(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetEntryPointInitiallyHidden(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetEntryPointMenuHint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SequenceGetEntryPointNameExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SequenceGetEntryPtMenuFromHint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *menuNameList, long *val);"
   "\n",
   "long TS_SequenceGetFailureAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FailureActions *val);"
   "\n",
   "long TS_SequenceGetGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetHasMismatchedBlocks(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SequenceGetLocals(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_SequenceGetNumSteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam, long *val);"
   "\n",
   "long TS_SequenceGetOptimizeNonReentrantCalls(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetParameters(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_SequenceGetRequirements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetSequenceIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_SequenceGetShowEntryPointForAllWindows(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetShowEntryPointForEditorOnly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetShowEntryPointForExeWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetShowEntryPointForFileWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_SequenceGetStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, enum TSEnum_StepGroups stepGroupParam, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetStepByName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *nameOfStep, enum TSEnum_StepGroups stepGroupParam, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetStepByUniqueId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *uniqueStepId, CAObjHandle *val);"
   "\n",
   "long TS_SequenceGetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *nameOfStep, enum TSEnum_StepGroups stepGroupParam, long *val);"
   "\n",
   "long TS_SequenceGetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SequenceTypes *val);"
   "\n",
   "long TS_SequenceInsertStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle stepToInsert, long index, enum TSEnum_StepGroups stepGroupParam);"
   "\n",
   "long TS_SequenceLoadModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long loadOptions, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_SequenceRemoveStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, enum TSEnum_StepGroups stepGroupParam, CAObjHandle *val);"
   "\n",
   "long TS_SequenceSetAllowInteractiveExecutionOfEntryPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetBreakOnEnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam, short breakOnEnd, struct tagVARIANT executionParam);"
   "\n",
   "long TS_SequenceSetBreakOnEndSettings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups stepGroupParam, short isSet, short enabled, long passCount, const char *conditionExpr, struct tagVARIANT executionParam);"
   "\n",
   "long TS_SequenceSetCopyStepsOnOverride(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetEntryPointCheckToSaveTitledSeqFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetEntryPointEnabledExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SequenceSetEntryPointIgnoreClient(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetEntryPointInitiallyHidden(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetEntryPointMenuHint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SequenceSetEntryPointNameExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SequenceSetFailureAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FailureActions val);"
   "\n",
   "long TS_SequenceSetGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_SequenceSetOptimizeNonReentrantCalls(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_SequenceSetShowEntryPointForAllWindows(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetShowEntryPointForEditorOnly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetShowEntryPointForExeWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetShowEntryPointForFileWindow(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_SequenceSetType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SequenceTypes val);"
   "\n",
   "long TS_SequenceStepNameExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *nameOfStep, enum TSEnum_StepGroups stepGroupParam, short *val);"
   "\n",
   "long TS_SequenceUnloadModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StationOptionsGetAllowAllUsersAccessFromRemoteMachine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetAllowAutomaticTypeConflictResolution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_AllowAutomaticTypeConflictResolutionOptions *val);"
   "\n",
   "long TS_StationOptionsGetAllowCancellingPreloadExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StationOptionsGetAllowOtherModels(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetAllowSequenceCallsFromRemoteMachine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetAlwaysGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetAutoLoginSystemUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_StationOptionsGetBreakOnSequenceFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetBreakOnStepFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetBreakpointsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetCheckOutFilesWhenEdited(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *checkOutFiles);"
   "\n",
   "long TS_StationOptionsGetCheckOutOnlySelectedFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *onlySelectedFiles);"
   "\n",
   "long TS_StationOptionsGetDebugOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StationOptionsGetDefaultCPUAffinityForThreads(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StationOptionsGetDefaultFileWritingFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileWritingFormats *returnVal);"
   "\n",
   "long TS_StationOptionsGetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isDisabled);"
   "\n",
   "long TS_StationOptionsGetEnableUserPrivilegeChecking(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_StationOptionsGetExecutionMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StationOptionsGetFileModificationIndicatorPolicy(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StationOptionsGetInteractiveBranchMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_InteractiveBranchModes *mode);"
   "\n",
   "long TS_StationOptionsGetInteractiveExePropagateStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetLanguage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **language);"
   "\n",
   "long TS_StationOptionsGetLanguages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **languages);"
   "\n",
   "long TS_StationOptionsGetLoginOnStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StationOptionsGetPreloadProgressDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_StationOptionsGetPromptToFindFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetPromptWhenAddingFilesToSC(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *promptAddFile);"
   "\n",
   "long TS_StationOptionsGetRTEOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions *option);"
   "\n",
   "long TS_StationOptionsGetRecognizeMBChars(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetReloadDocsWhenOpeningWorkspace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *reloadDocs);"
   "\n",
   "long TS_StationOptionsGetReloadWorkspaceAtStartup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *reloadWorkspace);"
   "\n",
   "long TS_StationOptionsGetRequireUserLogin(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *requireUser);"
   "\n",
   "long TS_StationOptionsGetSeqFileVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileVersionAutoIncrement *option);"
   "\n",
   "long TS_StationOptionsGetShowEngineTrayIconOnRemoteStations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetShowHiddenProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *show);"
   "\n",
   "long TS_StationOptionsGetSpecifyStepsByUniqueIdInExpressions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SpecifyStepsByUniqueIdOptions *option);"
   "\n",
   "long TS_StationOptionsGetStationID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StationOptionsGetStationModelSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **modelPath);"
   "\n",
   "long TS_StationOptionsGetSystemDefaultSourceCodeControlProvider(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StationOptionsGetTimeLimit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, double *timeLimit);"
   "\n",
   "long TS_StationOptionsGetTimeLimitAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, enum TSEnum_TimeLimitActions *action);"
   "\n",
   "long TS_StationOptionsGetTimeLimitEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetTracingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetTypeVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeVersionAutoIncrement *option);"
   "\n",
   "long TS_StationOptionsGetTypeVersionAutoIncrementPromptOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *option);"
   "\n",
   "long TS_StationOptionsGetUIMessageDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *millisecDelay);"
   "\n",
   "long TS_StationOptionsGetUIMessageMinDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *millisecDelay);"
   "\n",
   "long TS_StationOptionsGetUseDialogForCheckOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *useDialog);"
   "\n",
   "long TS_StationOptionsGetUseLocalizedDecimalPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *enabled);"
   "\n",
   "long TS_StationOptionsGetUseStationModel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isEnabled);"
   "\n",
   "long TS_StationOptionsGetUserFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StationOptionsSetAllowAllUsersAccessFromRemoteMachine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetAllowAutomaticTypeConflictResolution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_AllowAutomaticTypeConflictResolutionOptions val);"
   "\n",
   "long TS_StationOptionsSetAllowCancellingPreloadExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StationOptionsSetAllowOtherModels(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetAllowSequenceCallsFromRemoteMachine(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetAlwaysGotoCleanupOnFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetAutoLoginSystemUser(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_StationOptionsSetBreakOnSequenceFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetBreakOnStepFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetBreakpointsEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetCheckOutFilesWhenEdited(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short checkOutFiles);"
   "\n",
   "long TS_StationOptionsSetCheckOutOnlySelectedFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short onlySelectedFiles);"
   "\n",
   "long TS_StationOptionsSetDebugOptions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_StationOptionsSetDefaultCPUAffinityForThreads(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_StationOptionsSetDefaultFileWritingFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileWritingFormats returnVal);"
   "\n",
   "long TS_StationOptionsSetDisableResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isDisabled);"
   "\n",
   "long TS_StationOptionsSetEnableUserPrivilegeChecking(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_StationOptionsSetExecutionMask(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_StationOptionsSetFileModificationIndicatorPolicy(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long val);"
   "\n",
   "long TS_StationOptionsSetInteractiveBranchMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_InteractiveBranchModes mode);"
   "\n",
   "long TS_StationOptionsSetInteractiveExePropagateStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetLanguage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *language);"
   "\n",
   "long TS_StationOptionsSetLoginOnStart(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StationOptionsSetPreloadProgressDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double val);"
   "\n",
   "long TS_StationOptionsSetPromptToFindFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetPromptWhenAddingFilesToSC(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short promptAddFile);"
   "\n",
   "long TS_StationOptionsSetRTEOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions option);"
   "\n",
   "long TS_StationOptionsSetRecognizeMBChars(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetReloadDocsWhenOpeningWorkspace(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short reloadDocs);"
   "\n",
   "long TS_StationOptionsSetReloadWorkspaceAtStartup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short reloadWorkspace);"
   "\n",
   "long TS_StationOptionsSetRequireUserLogin(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short requireUser);"
   "\n",
   "long TS_StationOptionsSetSeqFileVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_FileVersionAutoIncrement option);"
   "\n",
   "long TS_StationOptionsSetShowEngineTrayIconOnRemoteStations(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetShowHiddenProperties(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short show);"
   "\n",
   "long TS_StationOptionsSetSpecifyStepsByUniqueIdInExpressions(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SpecifyStepsByUniqueIdOptions option);"
   "\n",
   "long TS_StationOptionsSetStationID(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StationOptionsSetStationModelSequenceFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *modelPath);"
   "\n",
   "long TS_StationOptionsSetSystemDefaultSourceCodeControlProvider(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StationOptionsSetTimeLimit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, double timeLimit);"
   "\n",
   "long TS_StationOptionsSetTimeLimitAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, enum TSEnum_TimeLimitActions action);"
   "\n",
   "long TS_StationOptionsSetTimeLimitEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TimeLimitTypes type, enum TSEnum_TimeLimitOperations operation, short enabled);"
   "\n",
   "long TS_StationOptionsSetTracingEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetTypeVersionAutoIncrementOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_TypeVersionAutoIncrement option);"
   "\n",
   "long TS_StationOptionsSetTypeVersionAutoIncrementPromptOpt(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short option);"
   "\n",
   "long TS_StationOptionsSetUIMessageDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecDelay);"
   "\n",
   "long TS_StationOptionsSetUIMessageMinDelay(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecDelay);"
   "\n",
   "long TS_StationOptionsSetUseDialogForCheckOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short useDialog);"
   "\n",
   "long TS_StationOptionsSetUseLocalizedDecimalPoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short enabled);"
   "\n",
   "long TS_StationOptionsSetUseStationModel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isEnabled);"
   "\n",
   "long TS_StationOptionsSetUserFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepAdditionalResultsGetCustomResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepAdditionalResultsGetParameterResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepCanChangeAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterName, short *val);"
   "\n",
   "long TS_StepCanChangeStepType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle stepTypePtr, short *val);"
   "\n",
   "long TS_StepCanExecuteSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long substepIndex, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_StepChangeAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterName);"
   "\n",
   "long TS_StepChangeStepType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle stepTypePtr);"
   "\n",
   "long TS_StepCreateCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepCreateNewUniqueStepId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_StepDisplayAdditionalResultsDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, long dlgOptions, short *pressedOK);"
   "\n",
   "long TS_StepEditCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepExecuteEditSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepExecuteSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long substepIndex, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_StepGetAdapterKeyName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetAdditionalResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetAdditionalResultsHints(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_BatchSynchronizationOptions *val);"
   "\n",
   "long TS_StepGetBlockEndIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockFlags(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockLevel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockLevelsUnmatched(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockNextIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockParentIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockPreviousIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBlockStartIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetBreakOnStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetBreakOnStepEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT executionParam, short *val);"
   "\n",
   "long TS_StepGetBreakSettings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *isSet, short *enabled, long *passCount, char **conditionExpr, struct tagVARIANT executionParam);"
   "\n",
   "long TS_StepGetCanCreateCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCanEditCode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCanExecuteEditSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCanSpecifyModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCancelCurrentExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCancelCurrentModuleExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCancelStepCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCausedSequenceFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetCurrentLoopResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetCustomActionExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomFalseAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomFalseActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomFalseActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomTrueAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomTrueActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetCustomTrueActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetDescriptionEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, char **val);"
   "\n",
   "long TS_StepGetEditAsReadOnly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetEditSubstepMenuStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetEvalPrecondForInteractiveExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EvalPrecondOptions *val);"
   "\n",
   "long TS_StepGetExecutionFlowString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, struct tagVARIANT executionParam, char **val);"
   "\n",
   "long TS_StepGetFailAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetFailActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetFailActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetIgnoreRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetIsSequenceCall(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetLargeIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetLargeIconIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetLastStepResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetLoopIncExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetLoopInitExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetLoopStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetLoopType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetLoopWhileExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions *val);"
   "\n",
   "long TS_StepGetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions *val);"
   "\n",
   "long TS_StepGetMutexNameOrRefExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPassAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPassActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPassActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPostExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPreExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetPrecondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_StepGetRecordLoopIterationResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetRecordResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetRequirements(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetResultRecordingOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ResultRecordingOptions *val);"
   "\n",
   "long TS_StepGetResultStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetResultStatusDisplayString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetRunModeEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT executionParam, char **val);"
   "\n",
   "long TS_StepGetRunTimeRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetSequence(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetSmallIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetSmallIconIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetStepFailCausesSequenceFail(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetStepGroup(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_StepGroups *val);"
   "\n",
   "long TS_StepGetStepIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepGetStepSettingsString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, CAObjHandle executionParam, char **val);"
   "\n",
   "long TS_StepGetStepType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepGetSwitchExecConnectionLifetime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecLifetimes *val);"
   "\n",
   "long TS_StepGetSwitchExecEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetSwitchExecMulticonnectMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecMulticonnectModes *val);"
   "\n",
   "long TS_StepGetSwitchExecOperation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperations *val);"
   "\n",
   "long TS_StepGetSwitchExecOperationOrder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperationOrders *val);"
   "\n",
   "long TS_StepGetSwitchExecRoutesToConnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetSwitchExecRoutesToDisconnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetSwitchExecVirtualDevice(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetSwitchExecWaitForDebounce(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetUniqueStepId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepGetUseMutex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepGetWindowActivation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WindowActivationOptions *val);"
   "\n",
   "long TS_StepLoadModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long loadOptions, struct tagVARIANT sequenceContextParam, short *val);"
   "\n",
   "long TS_StepLogAdditionalResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle resultValue, const char *resultName, long resultPropertyFlags);"
   "\n",
   "long TS_StepSetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_BatchSynchronizationOptions val);"
   "\n",
   "long TS_StepSetBreakOnStep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetBreakOnStepEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newBreakSetting, struct tagVARIANT executionParam);"
   "\n",
   "long TS_StepSetBreakSettings(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short isSet, short enabled, long passCount, const char *conditionExpr, struct tagVARIANT executionParam);"
   "\n",
   "long TS_StepSetCancelCurrentExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetCancelCurrentModuleExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetCancelStepCallback(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetCausedSequenceFailure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetCurrentLoopResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_StepSetCustomActionExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomFalseAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomFalseActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomFalseActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomTrueAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomTrueActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetCustomTrueActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetEditAsReadOnly(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetEvalPrecondForInteractiveExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EvalPrecondOptions val);"
   "\n",
   "long TS_StepSetFailAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetFailActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetFailActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetIgnoreRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetLastStepResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_StepSetLoopIncExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetLoopInitExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetLoopStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetLoopType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetLoopWhileExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions val);"
   "\n",
   "long TS_StepSetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions val);"
   "\n",
   "long TS_StepSetMutexNameOrRefExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPassAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPassActionTarget(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPassActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPostExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPreExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetPrecondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_StepSetRecordLoopIterationResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetRecordResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetResultRecordingOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ResultRecordingOptions val);"
   "\n",
   "long TS_StepSetResultStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetRunModeEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newRunMode, struct tagVARIANT executionParam);"
   "\n",
   "long TS_StepSetRunTimeRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetStepFailCausesSequenceFail(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetSwitchExecConnectionLifetime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecLifetimes val);"
   "\n",
   "long TS_StepSetSwitchExecEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetSwitchExecMulticonnectMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecMulticonnectModes val);"
   "\n",
   "long TS_StepSetSwitchExecOperation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperations val);"
   "\n",
   "long TS_StepSetSwitchExecOperationOrder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperationOrders val);"
   "\n",
   "long TS_StepSetSwitchExecRoutesToConnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetSwitchExecRoutesToDisconnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetSwitchExecVirtualDevice(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepSetSwitchExecWaitForDebounce(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetUseMutex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepSetWindowActivation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WindowActivationOptions val);"
   "\n",
   "long TS_StepSpecifyModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long specModOptions, short *val);"
   "\n",
   "long TS_StepTypeAddSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle newSubstep);"
   "\n",
   "long TS_StepTypeAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeChangeDesignatedAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *adapterName);"
   "\n",
   "long TS_StepTypeCreateCombinedStepType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle combineWith, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeDimProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *propertyKeyName, short newValue);"
   "\n",
   "long TS_StepTypeGetAdditionalResultsHints(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeGetAppliesToBlockStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_BatchSynchronizationOptions *val);"
   "\n",
   "long TS_StepTypeGetBlockEndTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetBlockStartTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetCanEncapsulate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetCanSpecifyModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetCodeTemplates(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeGetCustomActionExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetCustomFalseAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetCustomFalseActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetCustomTrueAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetCustomTrueActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetDefaultName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetDefaultNameExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetDescriptionExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetDesignatedAdapter(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetDimmablePropertyDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *propertyKeyName, char **val);"
   "\n",
   "long TS_StepTypeGetDimmablePropertyKeyNames(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY **returnList);"
   "\n",
   "long TS_StepTypeGetEvalPrecondForInteractiveExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EvalPrecondOptions *val);"
   "\n",
   "long TS_StepTypeGetFailAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetFailActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetIgnoreRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetLoopIncExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetLoopInitExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetLoopStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetLoopType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetLoopWhileExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetMenuGroupName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetMenuIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeGetMenuIconIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepTypeGetMenuItemNameExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeGetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions *val);"
   "\n",
   "long TS_StepTypeGetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions *val);"
   "\n",
   "long TS_StepTypeGetMutexNameOrRefExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetNumSubsteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_StepTypeGetPassAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetPassActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetPostExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetPreExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetPrecondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_StepTypeGetRecordLoopIterationResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetRecordResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetResultRecordingOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ResultRecordingOptions *val);"
   "\n",
   "long TS_StepTypeGetRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetStepFailCausesSequenceFail(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long substepIndex, CAObjHandle *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecConnectionLifetime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecLifetimes *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecMulticonnectMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecMulticonnectModes *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecOperation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperations *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecOperationOrder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperationOrders *val);"
   "\n",
   "long TS_StepTypeGetSwitchExecRoutesToConnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetSwitchExecRoutesToDisconnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetSwitchExecVirtualDevice(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_StepTypeGetSwitchExecWaitForDebounce(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetUseMutex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_StepTypeGetWindowActivation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WindowActivationOptions *val);"
   "\n",
   "long TS_StepTypeIsPropertyDimmed(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *propertyKeyName, short *val);"
   "\n",
   "long TS_StepTypeRemoveSubstep(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long substepIndex);"
   "\n",
   "long TS_StepTypeSetAppliesToBlockStructure(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetBatchSyncOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_BatchSynchronizationOptions val);"
   "\n",
   "long TS_StepTypeSetBlockEndTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetBlockStartTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetCanEncapsulate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetCustomActionExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetCustomFalseAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetCustomFalseActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetCustomTrueAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetCustomTrueActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetDefaultNameExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetDescriptionExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetEvalPrecondForInteractiveExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_EvalPrecondOptions val);"
   "\n",
   "long TS_StepTypeSetFailAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetFailActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetIconName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetIgnoreRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetLoopIncExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetLoopInitExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetLoopStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetLoopType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetLoopWhileExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetMenuGroupName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetMenuItemNameExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetModuleLoadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleLoadOptions val);"
   "\n",
   "long TS_StepTypeSetModuleUnloadOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ModuleUnloadOptions val);"
   "\n",
   "long TS_StepTypeSetMutexNameOrRefExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetPassAction(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetPassActionTargetByExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetPostExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetPreExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetPrecondition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_StepTypeSetRecordLoopIterationResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetRecordResult(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetResultRecordingOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ResultRecordingOptions val);"
   "\n",
   "long TS_StepTypeSetRunMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetStatusExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetStepFailCausesSequenceFail(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetSwitchExecConnectionLifetime(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecLifetimes val);"
   "\n",
   "long TS_StepTypeSetSwitchExecEnabled(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetSwitchExecMulticonnectMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecMulticonnectModes val);"
   "\n",
   "long TS_StepTypeSetSwitchExecOperation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperations val);"
   "\n",
   "long TS_StepTypeSetSwitchExecOperationOrder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SwitchExecOperationOrders val);"
   "\n",
   "long TS_StepTypeSetSwitchExecRoutesToConnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetSwitchExecRoutesToDisconnect(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetSwitchExecVirtualDevice(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_StepTypeSetSwitchExecWaitForDebounce(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetUseMutex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_StepTypeSetWindowActivation(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WindowActivationOptions val);"
   "\n",
   "long TS_StepTypeSpecifyModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long specModOptions, short *val);"
   "\n",
   "long TS_StepTypeSwapSubsteps(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index1, long index2);"
   "\n",
   "long TS_StepUnloadModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ThreadAddToBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown *batchObj, long orderNumber);"
   "\n",
   "long TS_ThreadAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ThreadClearCurrentRTE(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadClearTemporaryBreakpoint(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadDoInteractiveExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle interactiveArgsParam);"
   "\n",
   "long TS_ThreadFlushPostResults(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadGetBatch(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **val);"
   "\n",
   "long TS_ThreadGetCallStackSize(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ThreadGetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ThreadGetExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ThreadGetExternallySuspended(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ThreadGetId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_ThreadGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_ThreadGetRunTimeVariables(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_ThreadGetSequenceContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long callStackIndex, long *frameId, CAObjHandle *val);"
   "\n",
   "long TS_ThreadGetTerminationOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ThreadTerminationOptions *val);"
   "\n",
   "long TS_ThreadGetUniqueThreadId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_ThreadGetWillStepIntoModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_ThreadPostUIMessage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_UIMessageCodes eventCode, double numericDataParam, const char *stringDataParam, short synchronous);"
   "\n",
   "long TS_ThreadPostUIMessageEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_UIMessageCodes eventCode, double numericDataParam, const char *stringDataParam, struct IUnknown *activeXDataParam, short synchronous);"
   "\n",
   "long TS_ThreadResume(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadSetBatchRTEOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_RTEOptions newValue);"
   "\n",
   "long TS_ThreadSetExternallySuspended(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_ThreadSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_ThreadSetStepInto(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadSetStepOut(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadSetStepOver(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_ThreadSetTerminationOption(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_ThreadTerminationOptions val);"
   "\n",
   "long TS_ThreadWaitForEnd(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long millisecondTimeOut, short processWindowsMsgs, struct tagVARIANT stepToStoreResultsIn, struct tagVARIANT callingSequenceContext, short *val);"
   "\n",
   "long TS_TypeUsageListAddUsedTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle propObject, short *val);"
   "\n",
   "long TS_TypeUsageListCreateAndInsertNewTypeFromExisting(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle existingType, long index, enum TSEnum_TypeCategories typeCategoryParam, long reservedParam, CAObjHandle *val);"
   "\n",
   "long TS_TypeUsageListGetChangeCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_TypeUsageListGetIsTypeAttachedToFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, short *val);"
   "\n",
   "long TS_TypeUsageListGetNumTypes(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_TypeUsageListGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_TypeUsageListGetTypeDefinition(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_TypeUsageListGetTypeIndex(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *typeNameParam, long *val);"
   "\n",
   "long TS_TypeUsageListInsertType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle typeToInsert, long index, enum TSEnum_TypeCategories typeCategoryParam);"
   "\n",
   "long TS_TypeUsageListMoveType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, long newIndex);"
   "\n",
   "long TS_TypeUsageListRemoveType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_TypeUsageListSetIsTypeAttachedToFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, short store);"
   "\n",
   "long TS_TypeUsageListSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_TypeUsageListUnion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle unionTypeUsageList, short *val);"
   "\n",
   "long TS_TypeUsageListValidateNewTypeName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newName, short allowDuplicates, short *isValid, char **val);"
   "\n",
   "long TS_UIMessageAcknowledge(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UIMessageAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UIMessageGetActiveXData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **val);"
   "\n",
   "long TS_UIMessageGetEvent(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_UIMessageCodes *val);"
   "\n",
   "long TS_UIMessageGetExecution(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UIMessageGetIsSynchronous(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_UIMessageGetNumericData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, double *val);"
   "\n",
   "long TS_UIMessageGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_UIMessageGetStringData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_UIMessageGetThread(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UIMessageSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_UndoItemCreatorBeginBatchEdit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagSAFEARRAY *objs);"
   "\n",
   "long TS_UndoItemCreatorBeginEdit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle obj);"
   "\n",
   "long TS_UndoItemCreatorBeginEditEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle obj, const char *lookupString);"
   "\n",
   "long TS_UndoItemCreatorCreateAndPostUndoItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, enum TSEnum_ApplicationSites locationsApplicationSite, struct tagVARIANT locationsUserData, CAObjHandle *val);"
   "\n",
   "long TS_UndoItemCreatorEndBatchEdit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UndoItemCreatorEndEdit(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UndoItemCreatorGetHaveEditsBeenMade(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_UndoItemsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_UndoItemsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_UndoItemsGetTopItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UndoItemsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_UndoItemsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_UndoStackAggregateTopUndoItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long numItemsToAggregate, const char *aggregateItemDescription, CAObjHandle aggregatePreEditLocations, CAObjHandle aggregatePostEditLocations);"
   "\n",
   "long TS_UndoStackClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UndoStackGetCanRedo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_UndoStackGetCanUndo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_UndoStackGetRedoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *acceleratorPrefix, char **val);"
   "\n",
   "long TS_UndoStackGetRedoItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UndoStackGetUndoDescription(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *acceleratorPrefix, char **val);"
   "\n",
   "long TS_UndoStackGetUndoItems(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UndoStackPush(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle item);"
   "\n",
   "long TS_UndoStackRedo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UndoStackUndo(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UnmappedArgumentValueGetName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **propertyValue);"
   "\n",
   "long TS_UnmappedArgumentValueGetTypeName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **propertyValue);"
   "\n",
   "long TS_UnmappedArgumentValueGetUnmappedArgumentValues(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *propertyValue);"
   "\n",
   "long TS_UnmappedArgumentValueGetValueExpr(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **propertyValue);"
   "\n",
   "long TS_UnmappedArgumentValuesClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UnmappedArgumentValuesGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *numberOfValues);"
   "\n",
   "long TS_UnmappedArgumentValuesGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *unmappedArgumentValueObject);"
   "\n",
   "long TS_UnmappedArgumentValuesGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_UserAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UserGetFullName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_UserGetLoginName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_UserGetMembers(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UserGetPassword(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_UserGetPrivileges(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UserGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_UserHasPrivilege(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *privilegeName, short *val);"
   "\n",
   "long TS_UserSetFullName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_UserSetLoginName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_UserSetPassword(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_UserSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_UserValidatePassword(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *passwordString, short *val);"
   "\n",
   "long TS_UsersFileAsPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UsersFileGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_UsersFileGetUserGroupList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UsersFileGetUserList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UsersFileGetUserProfileList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_UsersFileReloadFromDisk(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_UsersFileSetByRefUserList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_UsersFileSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_UsersFileSetPropertyByRef(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_UsersFileSetUserGroupList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_UsersFileSetUserList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_UsersFileSetUserProfileList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle val);"
   "\n",
   "long TS_UtilityEscape(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stringToEscape, long options, char **val);"
   "\n",
   "long TS_UtilityUnescape(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *stringToUnescape, long options, char **val);"
   "\n",
   "long TS_WatchExpressionBreakpointTriggered(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle seqContext, short *val);"
   "\n",
   "long TS_WatchExpressionDisplayConfigurationDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *dlgTitle, CAObjHandle context, long dlgOptions, short *userHitOK);"
   "\n",
   "long TS_WatchExpressionEvaluate(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle seqContext, long reserved, CAObjHandle *val);"
   "\n",
   "long TS_WatchExpressionGetBreakpointType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WatchExpressionBreakType *val);"
   "\n",
   "long TS_WatchExpressionGetClientSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **clientFileNameParam);"
   "\n",
   "long TS_WatchExpressionGetExecutionScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *execParam);"
   "\n",
   "long TS_WatchExpressionGetExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WatchExpressionGetNumericFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WatchExpressionGetScopingContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle currentSeqContext, CAObjHandle *scopingContext);"
   "\n",
   "long TS_WatchExpressionGetSequenceFileScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **sequenceFileNameParam);"
   "\n",
   "long TS_WatchExpressionGetSequenceScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **sequenceNameParam);"
   "\n",
   "long TS_WatchExpressionGetUniqueWatchId(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WatchExpressionGetUseScopingContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_WatchExpressionSetBreakpointType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WatchExpressionBreakType val);"
   "\n",
   "long TS_WatchExpressionSetByRefExecutionScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle execParam);"
   "\n",
   "long TS_WatchExpressionSetClientSequenceFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *clientFileNameParam);"
   "\n",
   "long TS_WatchExpressionSetExpression(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WatchExpressionSetNumericFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WatchExpressionSetSequenceFileScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceFileNameParam);"
   "\n",
   "long TS_WatchExpressionSetSequenceScope(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *sequenceNameParam);"
   "\n",
   "long TS_WatchExpressionSetUseScopingContext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short val);"
   "\n",
   "long TS_WatchExpressionsClear(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_WatchExpressionsClone(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT insertInEngine, CAObjHandle *clone);"
   "\n",
   "long TS_WatchExpressionsGetCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_WatchExpressionsGetItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT index, CAObjHandle *watchExpression);"
   "\n",
   "long TS_WatchExpressionsGet_NewEnum(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct IUnknown **enumerator);"
   "\n",
   "long TS_WatchExpressionsInsert(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle beforePos, struct tagVARIANT clientSequenceFileParam, struct tagVARIANT insertInEngine, CAObjHandle *insertedWatchExpression);"
   "\n",
   "long TS_WatchExpressionsRemove(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle watchExpression);"
   "\n",
   "long TS_WorkspaceFileAsPropertyObjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceFileDisplayAddFileToWorkspaceDialog(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle selectedProject, const char *fullPath, short *val);"
   "\n",
   "long TS_WorkspaceFileFindWorkspaceObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *fullPath, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceFileGetIsConnectedToSCProvider(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_WorkspaceFileGetOptionsFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceFileGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_WorkspaceFileGetProviderName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceFileGetRootWorkspaceObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceFileRunSourceControlProvider(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long TS_WorkspaceFileSaveWorkspaceAndProjectFiles(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options, short *val);"
   "\n",
   "long TS_WorkspaceFileSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_WorkspaceFileSetProviderName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WorkspaceObjectAsPropertyObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectCanDoSourceControlCommand(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SourceControlCommands scCommand, long options, struct tagVARIANT itemList, short *val);"
   "\n",
   "long TS_WorkspaceObjectDoSourceControlCommand(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_SourceControlCommands scCommand, short *modifiedObject, long options, struct tagVARIANT itemList, short *val);"
   "\n",
   "long TS_WorkspaceObjectGetAbsolutePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceObjectGetCodeModuleSeqFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceObjectGetContainedObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectGetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceObjectGetFileExists(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_WorkspaceObjectGetIsCodeModule(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *val);"
   "\n",
   "long TS_WorkspaceObjectGetLastSourceControlMessages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceObjectGetNumContainedObjects(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_WorkspaceObjectGetObjectType(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, enum TSEnum_WorkspaceObjectTypes *val);"
   "\n",
   "long TS_WorkspaceObjectGetParentContainer(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectGetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **val);"
   "\n",
   "long TS_WorkspaceObjectGetProjectFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectGetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, void *value);"
   "\n",
   "long TS_WorkspaceObjectGetSourceControlStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *val);"
   "\n",
   "long TS_WorkspaceObjectInsertCodeModules(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT itemList, struct tagSAFEARRAY **val);"
   "\n",
   "long TS_WorkspaceObjectInsertObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle obj, long index);"
   "\n",
   "long TS_WorkspaceObjectNewFile(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *path, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectNewFolder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *folderName, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectRemoveObject(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long index, CAObjHandle *val);"
   "\n",
   "long TS_WorkspaceObjectSetCodeModuleSeqFilePath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WorkspaceObjectSetDisplayName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WorkspaceObjectSetPath(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *val);"
   "\n",
   "long TS_WorkspaceObjectSetProperty(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned int propertyID, unsigned int propertyType, ...);"
   "\n",
   "long TS_WorkspaceObjectUpdateStatus(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long options);"
   "\n",
   "int Test_CVIVersion(struct tsErrorDataType *ErrInfo);"
   "\n",
   "int Test_EStopInjection(CAObjHandle seqContext, struct tsErrorDataType *ErrInfo);"
   "\n",
   "int Test_WindowsVersion(struct tsErrorDataType *ErrInfo);"
   "\n",
   "int UnitTest_FormMIS(struct tsErrorDataType *ErrInfo);"
   "\n",
   "\0"
}

CVIDLLexports2 CVIDLLprototypes
{
}
